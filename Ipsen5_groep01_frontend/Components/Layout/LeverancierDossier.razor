@page "/LeverancierDossierScherm/{candidateId}"
@layout MainLayout
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@using Ipsen5_groep01_frontend.Services
@inject LoginService LoginService
@inject ContractService ContractService
@inject CandidateService CandidateService

@using Models

@* <input type="text" placeholder="Zoeken" @bind="searchTerm" @oninput="HandleInput"/> *@


 
<div class="customer-container-background">

    <div class="page-title">Mijn Opdrachten</div>
    <div class="filter-container">
        <div class="filters">
            <div class="search-container">
            </div>

           @*  <div class="dropdown-container">
                <select class="dropdown-field">
                    <option value="">Selecteer filter</option>
                    <option value="option1">Optie 1</option>
                    <option value="option2">Optie 2</option>
                    <option value="option3">Optie 3</option>
                </select>
            </div> *@

        </div>

    
    </div>

    <div class="customer-container">

        <div class="customer-header">
            <div class="header-title">Opdracht</div>
            <div class="header-title">Professional</div>
            <div class="header-title">Beschrijving</div>
            <div class="header-title">Status</div>
            <div class="header-title"></div>
            <div class="header-title">Acties</div>
        </div>
       
        @foreach (var contract in _contracts.Skip((currentPage - 1) * pageSize).Take(pageSize))
        {
            <div class="customers" @onclick="()=>navigate(contract.CandidateId, contract.Id)">
                <div>@getContractNameById(@contract.Id)</div>
                <div>@GetCandidateNameById(@contract.CandidateId)</div>
                <div>@contract.JobDescription</div>
                <div>@contract.Status</div>
                <div></div>
                <div></div>
                
                <button class="view_customer">
                    <img class="eye_icon" src="/icons/right-arrow-icon.svg" alt="Bekijk" />
                </button>
             
            </div>
        }

        <div class="pagination-container">
            <div class="pagination-buttons">

                <button class="previous-page-button" @onclick="() => ChangePage(-1)">
                    @if (currentPage > 1)
                    {
                        <img class="rotate-18" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

                <div class="pagination-info">
                    @currentPage
                </div>

                <button class="next-page-button" @onclick="() => ChangePage(1)">
                </button>

            </div>
        </div>

    </div>
</div>
 

@code {

    private string searchTerm = "";
    private int pageSize = 10;
    private int currentPage = 1;
    private List<Candidate> _candidates = [];
    private List<Contract> _contracts = [];

    [Parameter]
    public required string candidateId {get; set;}
    
    protected override async Task OnInitializedAsync()
    {
        await ContractService.GetAllContracts(".");
        _contracts = ContractService.Contracts;

        await getContract();
        await GetAllCandidatesFromService();
        
    }

    private string getContractNameById(Guid id){
        var Contract = _contracts.FirstOrDefault(ut => ut.Id == id);
        return Contract.JobDescription;
    }

    public async Task getContract(){
        await this.ContractService.getContractsByCandidateId(candidateId);
    }

     private async Task GetAllCandidatesFromService(){
        _candidates = await this.CandidateService.GetAllCandidates(".");
    }

     public string GetCandidateNameById(Guid id){
        var Candidate = _candidates.FirstOrDefault(ut => ut.Id == id);

        if(Candidate == null){
            return "Unknown";
        }

        return Candidate.FirstName + " " + Candidate?.LastName;
    }
    

    protected override void OnAfterRender(bool firstRender){
        if(firstRender){
            LoginService.setIsAdmin(false);
            LoginService.setLoggedIn(true);
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            string tempSearchTerm = e.Value.ToString()?.ToUpper() ?? string.Empty;
            if (tempSearchTerm != null)
            {
                searchTerm = tempSearchTerm;
            
            }
        }
    }

   



    private void ChangePage(int increment)
    {
        currentPage += increment;
    }

    public void navigate(Guid candidateId, Guid contractId)
    {
        this.NavigationManager.NavigateTo($"/LeverancierDossierInzien/{candidateId}/{contractId}");
    }
}