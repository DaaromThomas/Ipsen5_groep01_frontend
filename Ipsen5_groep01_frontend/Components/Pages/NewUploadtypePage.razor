@page "/NewUploadtype"

@using Microsoft.AspNetCore.Components.Authorization
@using Services

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Requests;
@using Microsoft.AspNetCore.Authorization;
@using Models;


@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject RequestMakerService RequestMakerService

<EditForm Model="UploadTypeModel" OnValidSubmit="CreateUploadTypesAsync" FormName="createUploadType">
    <DataAnnotationsValidator />

    <div class="input-container ">
        <div class="input-description-container">
            <div class="description-title">
                Documenten
            </div>

            <div class="description">
                Vul hieronder de basisgegevens in om verder te gaan. Zorg ervoor dat alle velden correct en volledig zijn ingevuld.
            </div>

            <div class="section">
                <div class="section-title">Document</div>
                <div class="input-title">Voer een naam in.</div>
                <div>
                    <input class="input-field" placeholder="CV" @bind="UploadTypeModel.Type" />
                </div>

                <div>
                    <div class="input-title">Selecteer toegestane types</div>

                    <div class="documentType-container">
                        @foreach (var documentType in DocumentTypes)
                        {
                            <div class="clickable-item @(selectedDocumentTypeIds.Contains(documentType.Id) ? "selected" : "")" @onclick="() => ToggleSelection(documentType.Id)">
                                @documentType.Type
                                <img class="add-close-icon" src="icons/@(selectedDocumentTypeIds.Contains(documentType.Id) ? "/add.png" : "/close.png")" />
                            </div>
                        }

                    </div>

                    <div class="checkbox-container">
                        <div class="input-title">Standaard</div>
                        <input class="requierdcheckbox" type="checkbox" @bind="UploadTypeModel.Required" />
                    </div>
                </div>


            </div>

            <div class="button-container">
                <button type="submit" class="previous-button" @onclick="() => NavigateToUploadtypePage()">
                    Vorige
                </button>
                <button type="submit" class="next-button" @onclick="() => CreateUploadTypesAsync()">
                    Opslaan
                </button>
            </div>


        </div>

    </div>



</EditForm>

@code {
    private List<DocumentTypeModel> DocumentTypes = new List<DocumentTypeModel>();
    private UploadTypeModel UploadTypeModel = new UploadTypeModel();
    private List<Guid> selectedDocumentTypeIds = new List<Guid>();

    protected override void OnInitialized()
    {
        if (!AuthService.IsLoggedIn || AuthService.Role != "Admin")
        {
            NavigationManager.NavigateTo("/signin");
        }

        RequestMakerService = new RequestMakerService(new HttpClient());

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetDocumentTypesAsync();
    }

    private void UpdateSelectedUploadTypes(ChangeEventArgs e)
    {
        var selectedValues = e.Value as IEnumerable<string>;
        if (selectedValues != null)
        {
            selectedDocumentTypeIds = selectedValues.Select(Guid.Parse).ToList();
        }
    }

    public async Task<List<DocumentTypeModel>> GetDocumentTypesAsync()
    {
        var response = await RequestMakerService.MakeGetRequest("documenttype/alldocumenttypes");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var documentExtension = outerObject?["result"]?["documentTypeDto"]["documentExtension"];

        if(documentExtension == null){
            return [];
        }

        foreach (JProperty property in documentExtension)
        {
            var documentId = Guid.Parse(property.Name);
            var extension = property.Value.ToString();

            var documentType = new DocumentTypeModel
                {
                    Id = documentId,
                    Type = extension
                };

            DocumentTypes.Add(documentType);
        }

        return DocumentTypes;
    }




    public async Task CreateUploadTypesAsync()
    {
        foreach (var documentTypeId in selectedDocumentTypeIds)
        {
            var documentType = DocumentTypes.FirstOrDefault(dt => dt.Id == documentTypeId);

            if (documentType != null)
            {
                UploadTypeModel.DocumentType = documentType.Type;
                UploadTypeRequest request = new UploadTypeRequest
                    {
                        UploadTypeDto = UploadTypeModel
                    };

                await RequestMakerService.MakePostRequest("uploadtype/adduploadtype", request, "");
                this.NavigateToUploadtypePage();

            }
        }
    }

    private void ToggleSelection(Guid id)
    {
        if (selectedDocumentTypeIds.Contains(id))
        {
            selectedDocumentTypeIds.Remove(id);
        }
        else
        {
            selectedDocumentTypeIds.Add(id);
        }
    }

    private string GetSelectedClass(Guid id)
    {
        return selectedDocumentTypeIds.Contains(id) ? "selected" : "";
    }

    private void NavigateToUploadtypePage()
    {
        NavigationManager.NavigateTo("/documentbeheer");
    }
}
