@page "/NewUploadtype"

@using Microsoft.AspNetCore.Components.Authorization
@using Services

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Requests;
@using Microsoft.AspNetCore.Authorization;
@using Models;


@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<EditForm Model="UploadTypeModel" OnValidSubmit="CreateUploadTypesAsync" FormName="createUploadType">
    <DataAnnotationsValidator />

    <div class="center-screen">


    
    <div class="form-group">
        <label for="streetName">Naam:</label>
        <InputText id="type" @bind-Value="UploadTypeModel.Type" class="form-control"></InputText>
    </div>

    <div class="form-group check-box">
        <label for="required">Verplicht:</label>
        <input @bind="UploadTypeModel.Required" class="document-checkbox" type="checkbox" />
    </div>

 
    <div class="form-group">
        <label for="type">Selecteer:</label>
        <select id="type" @onchange="UpdateSelectedUploadTypes" multiple class="form-control dropdownlist">
            @foreach (var documentType in DocumentTypes)
            {
                <option value="@documentType.Id">@documentType.Type</option>
            }
        </select>
    </div>

        <button type="submit" class="next-button">
            Opslaan
        </button>
    </div>
    

</EditForm>

@code {

    private RequestMakerService _requestMakerService;
    private List<DocumentTypeModel> DocumentTypes = new List<DocumentTypeModel>();
    private UploadTypeModel UploadTypeModel = new UploadTypeModel();
    private List<Guid> selectedDocumentTypeIds = new List<Guid>();

    protected override void OnInitialized()
    {
        if (!AuthService.IsLoggedIn || AuthService.Role != "Admin")
        {
            NavigationManager.NavigateTo("/signin");
        }

        _requestMakerService = new RequestMakerService(HttpClient);

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetDocumentTypesAsync();
    }

    private void UpdateSelectedUploadTypes(ChangeEventArgs e)
    {
        var selectedValues = e.Value as IEnumerable<string>;
        if (selectedValues != null)
        {
            selectedDocumentTypeIds = selectedValues.Select(Guid.Parse).ToList();
        }
    }

    public async Task<List<DocumentTypeModel>> GetDocumentTypesAsync()
    {
        var response = await _requestMakerService.MakeGetRequest("documenttype/alldocumenttypes");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var documentExtension = outerObject["result"]["documentTypeDto"]["documentExtension"];

        foreach (JProperty property in documentExtension)
        {
            var documentId = Guid.Parse(property.Name);
            var extension= property.Value.ToString();

            var documentType = new DocumentTypeModel
                {
                    Id = documentId,
                    Type = extension
                };

            DocumentTypes.Add(documentType);
        }

        return DocumentTypes;
    }




    public async Task CreateUploadTypesAsync()
    {
        foreach (var documentTypeId in selectedDocumentTypeIds)
        {
            var documentType = DocumentTypes.FirstOrDefault(dt => dt.Id == documentTypeId);

            if (documentType != null)
            {
                UploadTypeModel.DocumentType = documentType.Type;
                UploadTypeRequest request = new UploadTypeRequest
                    {
                        UploadTypeDto = UploadTypeModel
                    };

                await _requestMakerService.MakePostRequest("uploadtype/adduploadtype", request);
            }
        }
    }
}
