@page "/contract"
@rendermode InteractiveServer


@using Services
@using Models
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Microsoft.AspNetCore.Components.Forms


@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject CandidateService CandidateService
@inject RequestMakerService RequestMakerService
@inject GetColorService GetColorService;



<div class="contract-container-background">
    <div class="page-title">Contracten</div>
    <div class="filter-container">
        <div class="filters">
            <div class="search-container">
                <EditForm Model="contracts" FormName="createCustomerAddressForm">
                    <DataAnnotationsValidator />

                    <div class="form-group search-field">
                        <InputText id="name" @bind-Value="tijdelijk" class="form-control" placeholder="Zoeken"></InputText>
                    </div>

                </EditForm>
            </div>

            <div class="dropdown-container">
                <select class="dropdown-field">
                    <option value="">Selecteer filter</option>
                    <option value="option1">Optie 1</option>
                    <option value="option2">Optie 2</option>
                    <option value="option3">Optie 3</option>
                </select>
            </div>

        </div>

        <div class="new-contract-button-container">
            <button class="new-contract-button" @onclick="() => NavigateToNewContract()">Nieuw Contract</button>
        </div>

    </div>
    <div class="contract-container">
        <div class="contract-header">
            <div class="header-title">Opdrachtgever</div>
            <div class="header-title">Professional</div>
            <div class="header-title">Periode</div>
            <div class="header-title">Status</div>
            <div class="header-title">Functie</div>
            <div class="header-title">Acties</div>
        </div>

        @foreach (var contract in contracts.Skip((currentPage - 1) * pageSize).Take(pageSize))
        {

                <div class="contracts" @onclick="() => NavigateToContractDetails(contract.Id.ToString())">
                    <div>@getCustomerNameById(@contract.CustomerId)</div>
                    <div>@getCandidateNameById(@contract.CandidateId)</div>
                    <div>@contract.StartDate.ToString("dd-MM-yyyy") - @contract.EndDate.ToString("dd-MM-yyyy")</div>

                    <div class="status-container-color">
                        <div class="status" style="background-color: @(GetColorService.GetBackgroundColor(contract.Status));">
                            @contract.Status
                        </div>
                    </div>

                    <div>@contract.JobDescription</div>
                    <button class="view_contract" @onclick="() => NavigateToContractDetails(contract.Id.ToString())">
                        <img class="eye_icon" src="/icons/eye-5.png" alt="Bekijk" />
                    </button>
                    <button class="edit_contract">
                        <img class="edit_icon" src="/icons/edit-3.png" alt="Bewerk" />
                    </button>
                    <button class="delete_contract">
                        <img class="delete_icon" src="/icons/trash-2.png" alt="Verwijder" />
                    </button>

                </div>
        }

        <div class="pagination-container">
            <div class="pagination-buttons">

                <button class="previous-page-button" @onclick="() => ChangePage(-1)">
                    @if (currentPage > 1)
                    {
                        <img class="rotate-18" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

                <div class="pagination-info">
                    @currentPage van @totalPages
                </div>

                <button class="next-page-button" @onclick="() => ChangePage(1)">
                    @if (contracts.Count() > currentPage * pageSize)
                    {
                        <img class="rotate-180" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

            </div>
        </div>

    </div>
</div>



@code {
    private List<Contract> contracts = new List<Contract>();

    private int pageSize = 10;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)contracts.Count() / pageSize);
    private string tijdelijk = "";
    private CustomerService _customerService;
    private CandidateService _candidateService;


    private List<Candidate> _candidates = [];
    private List<Customer> _customers = [];


    public ContractsPage()
    {
        RequestMakerService = new RequestMakerService(new HttpClient());
        _customerService = new CustomerService(RequestMakerService);
        _candidateService = new CandidateService(RequestMakerService);
    }


    private async Task GetAllCandidates(){
        await _candidateService.GetAllCandidates();
    }



    protected override void OnInitialized()
    {
        if (!AuthService.IsLoggedIn || AuthService.Role != "Admin")
        {
            NavigationManager.NavigateTo("/signin");
        }

        base.OnInitialized();
    }


    private async Task<Customer> GetCustomerById(Guid customerId)
    {
        var customer = await _customerService.GetCustomerById(customerId);
        return customer;
    }

    private Dictionary<Guid, Customer> customers = new Dictionary<Guid, Customer>();
    private Dictionary<Guid, Candidate> candidates = new Dictionary<Guid, Candidate>();


    protected override async Task OnInitializedAsync()
    {
        await GetContracts();
        await GetAllCandidatesFromService();
        await GetAllCustomers();
    }

    private string getCandidateNameById(Guid id){
        var Candidate = _candidates.FirstOrDefault(ut => ut.Id == id);
        return Candidate?.FirstName + " " + Candidate?.LastName ?? "Unknown";
    }

    private async Task GetAllCandidatesFromService(){
        _candidates = await this.CandidateService.GetAllCandidates();
    }

    private string getCustomerNameById(Guid id)
    {
        var customer = _customers.FirstOrDefault(ut => ut.Id == id);

        return customer?.Name ?? "Unknown";
    }


    public async Task<List<Contract>> GetContracts()
    {
        var response = await RequestMakerService.MakeGetRequest("contract/allcontracts");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var contractArray = outerObject?["result"]?["contractDto"];

        if(contractArray == null){
            return [];
        }

        foreach (var jToken in contractArray)
        {

            var contract = new Contract();
            contract.Id = ParseGuid(jToken, "id");
            contract.CandidateId = ParseGuid(jToken, "candidateId");
            contract.CustomerId = ParseGuid(jToken, "customerId");
            contract.Status = ParseString(jToken, "status");
            contract.StartDate = ParseDateTime(jToken, "startDate");
            contract.EndDate = ParseDateTime(jToken, "endDate");
            contract.PurchaseRate = ParseDouble(jToken, "purchaseRate");
            contract.SellingRate = ParseDouble(jToken, "sellingRate");
            contract.PaymentTerm = ParseString(jToken, "paymentTerm");
            contract.FeeParty = ParseString(jToken, "feeParty");
            contract.JobDescription = ParseString(jToken, "jobDescription");
            contract.Note = ParseString(jToken, "note");
            contract.Template = ParseBool(jToken, "template");

            contracts.Add(contract);
        }
        return contracts;
    }

    private void NavigateToContractDetails(string contractId)
    {
        NavigationManager.NavigateTo($"/DocumentBeoordelen/{contractId}");
    }

    private void NavigateToNewContract()
    {
        NavigationManager.NavigateTo("/ContractCreationPage");
    }

    void ChangePage(int increment)
    {
        currentPage += increment;
    }

    

    public async Task<List<Customer>> GetAllCustomers()
    {
        var response = await RequestMakerService.MakeGetRequest("Customer/allcustomers");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var customerArray = outerObject?["result"]?["customerDto"];

        if(customerArray == null){
            return [];
        }

        foreach (var jToken in customerArray)
        {
            var customer = new Customer();
            customer.Id = ParseGuid(jToken, "id");
            customer.Name = ParseString(jToken, "name");
            customer.CustomerAddressDto = new CustomerAddress();
            customer.FirstName = ParseString(jToken, "firstName");
            customer.LastName = ParseString(jToken, "lastName");
            customer.KVK = ParseString(jToken, "kvk");
            customer.VAT = ParseString(jToken, "vat");
            customer.BankAccountNumber = ParseString(jToken, "bankAccountNumber");
            customer.Email = ParseString(jToken, "email");
            customer.PhoneNumber = ParseString(jToken, "phoneNumber");
            customer.Disabled = ParseBool(jToken, "disabled");

            _customers.Add(customer);
        }

        return _customers;
    }

    private Guid ParseGuid(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && Guid.TryParse(valueToken.ToString(), out Guid parsedId) ? parsedId : Guid.Empty;
    }

    private string ParseString(JToken token, string key)
    {
        return token[key]?.ToString() ?? string.Empty;
    }

    private bool ParseBool(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && bool.TryParse(valueToken.ToString(), out bool parsedBool) ? parsedBool : false;
    }

    private DateTime ParseDateTime(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && DateTime.TryParse(valueToken.ToString(), out DateTime parsedDate) ? parsedDate : DateTime.MinValue;
    }

    private double ParseDouble(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && double.TryParse(valueToken.ToString(), out double parsedDouble) ? parsedDouble : 0.0;
    }
}