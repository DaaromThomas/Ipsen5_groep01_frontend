@page "/LeverancierDossierInzien/{candidateId}/{contractId}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Http
@using Models
@inject NavigationManager NavigationManager

@using Services;
@using Ipsen5_groep01_frontend.Requests

@inject LoginService LoginService
@inject FileUploadService FileUploadService
@inject ContractService ContractService
@inject RequestMakerService RequestMakerService

@inject IJSRuntime JSRuntime
@inject RequestMakerService RequestMakerService
@inject HttpClient HttpClient
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;


<div class="customer-container-background">
<div class="button-container">
        <button class="navigate-button" @onclick="()=>navigate()">Terug</button>
    </div>
    <div class="page-title">@contractId</div>
    <div class="customer-container">
        <div class="customer-header">
            <div class="header-title">Naam</div>
            <div class="header-title"></div>
            <div class="header-title">Geupload op</div>
            <div class="header-title">Status</div>
            <div class="header-title">Kies Bestand</div>
            <div class="header-title">Uploaden</div>
            <div class="header-title">Template</div>
        </div>

        @if (candidateDocuments != null)
        {
            @foreach (var document in candidateDocuments)
            {
                <div class="customers">
                    <div>@GetUploadTypeName(@document.UploadTypeId)</div>
                    <div></div>
                    <div>@document.UpdatedBy</div>
                    <div class="status" style="background-color: @GetBackgroundColor(document.Status)">@document.Status</div>
                    @if(document.Status == "New" || document.Status == "Afgekeurd"){
                        <InputFile class="eye_icon" OnChange="@(e => file = e)" @onclick:stopPropagation/>
                        <button class="view_customer" @onclick="() => UploadFile(document.Id.ToString(), file, candidateId, document.ContractId.ToString(), GetUploadTypeName(document.UploadTypeId), document)">
                            <img class="eye_icon" src="/icons/upload.png"/>
                        </button>
                    }
                    <img class="edit_icon" src="/icons/download.png" alt="Bewerk" @onclick="() => DownloadDocument(GetUploadTypeName(document.UploadTypeId))"/>
                </div>

            }
        }
        else
        {
            <tr>
                <td colspan="2">Geen documenten gevonden.</td>
            </tr>
        }
    </div>
    @if (_contract != null)
    {
        <div class="contract-note-container">
            <label for="contractNote">Opmerkingen voor het contract:</label>
            <textarea id="contractNote" readonly>@_contract.Note</textarea>
        </div>
    }
</div>
<script>
    window.downloadTemplateFile = function (url, fileName) {
        var link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', fileName);
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>


@code {
    [Parameter]
    public required string candidateId { get; set; }

    [Parameter]
    public required string contractId { get; set; }
    private InputFileChangeEventArgs? file;

    private List<CandidateDocumentModel>? candidateDocuments;
    private List<UploadTypeModel> _uploadTypes = [];

    private Contract _contract = new Contract();
    private UploadType uploadType;

    protected override void OnInitialized()
    {
        RequestMakerService = new RequestMakerService(new HttpClient());
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadContracts();
        await LoadDocuments();
        await GetAllUploadTypesAsync();
        
    }

    private string GetUploadTypeName(Guid uploadTypeId)
    {
        var uploadType = _uploadTypes.FirstOrDefault(ut => ut.Id == uploadTypeId);
        return uploadType?.Type ?? "Unknown";
    }

    private async Task LoadContracts(){
    }

    private async Task LoadDocuments()
    {
        var _candidateId = Guid.Parse(candidateId);
        var _contractId = Guid.Parse(contractId);
        await ContractService.getContractsByCandidateId(candidateId.ToString());
        var contract = ContractService.Contracts.FirstOrDefault(c => c.Id.ToString() == contractId.ToString());
        _contract = contract;
        if (contract != null)
        {
            candidateDocuments = contract.CandidateDocumentsDto;
        }
    }

    private async Task DownloadDocument(string UploadTypeName){
        var response = await RequestMakerService.MakeGetRequest($"BlobStorage/downloadTemplateFile/{_contract.CustomerId}/{UploadTypeName}");
         var contentDisposition = response.Content.Headers.ContentDisposition;
        var fileName = contentDisposition?.FileNameStar ?? contentDisposition?.FileName ?? "downloaded_file";
        fileName = Uri.UnescapeDataString(fileName);
        string downloadsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
        var filePath = Path.Combine(downloadsPath, fileName);

        using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None))
        {
            await response.Content.CopyToAsync(fileStream);
        }

        var downloadUrl = $"https://staffingnowdocuments.blob.core.windows.net/myfiles/{_contract.CustomerId}/Templates/{UploadTypeName}";
        await JSRuntime.InvokeVoidAsync("downloadTemplateFile", downloadUrl, fileName);

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoginService.setIsAdmin(false);
            LoginService.setLoggedIn(true);
        }
    }

    private string GetRowColor(string status)
    {
        switch (status)
        {
            case "Wachten op beoordeling":
                return "#C3E6FF"; // Light blue
            case "Afgekeurd":
                return "#FFB8B8"; // Light red
            case "Nog op te leveren":
                return "#DBDBDB"; // Light gray
            case "Goedgekeurd":
                return "#92DD8c"; // Green
            default:
                return "white";
        }
    }

    private string GetBackgroundColor(string status)
    {
        return status switch
        {
            "New" => "lightgreen",
            "Completed" => "#AA77FF",
            "Wachten op beoordeling" => "#FFFDD0",
            "Goedgekeurd" => "#3CB371",
            "Afgekeurd" => "#FF3131",
            _ => "lightblue"
        };
    }

    public void navigate()
    {
        this.NavigationManager.NavigateTo($"/LeverancierDossierScherm/{candidateId}");
        ResetSelectedContract();
    }

    private void ResetSelectedContract()
    {
        contractId = "";
    }

    private async Task UploadFile(string documentId, InputFileChangeEventArgs e, string candidateId, string contractId, string uploadTypeName, CandidateDocumentModel document)
    {
        var file = e.File;
        if (file == null)
        {
            Console.WriteLine("No file selected.");
            return;
        }

        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);
            var result = await FileUploadService.UploadFileAsync(memoryStream, file.Name, candidateId, contractId, uploadTypeName);

            document.Status = "Wachten op beoordeling";

            CandidateDocumentModelRequest request = new CandidateDocumentModelRequest();
            request.CandidateDocumentDto = document;

            await RequestMakerService.MakePatchRequest("CandidateDocument/updateDocumentStatus", request);
        }

        
    }



    public async Task<List<UploadTypeModel>> GetAllUploadTypesAsync()
    {
        var response = await RequestMakerService.MakeGetRequest("uploadtype/alluploadtypes");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var contractArray = outerObject?["result"]?["uploadTypeDto"];

        if(contractArray == null){
            return [];
        }

        foreach (var jToken in contractArray)
        {
            var uploadType = new UploadTypeModel();
            uploadType.Id = ParseGuid(jToken, "id");
            uploadType.Type = ParseString(jToken, "type");
            uploadType.DocumentType = ParseString(jToken, "documentType");
            uploadType.Required = ParseBool(jToken, "required");

            _uploadTypes.Add(uploadType);
        }

        return _uploadTypes;
    }

    private Guid ParseGuid(JToken token, string key)
{
    var valueToken = token[key];
    return valueToken != null && Guid.TryParse(valueToken.ToString(), out Guid parsedId) ? parsedId : Guid.Empty;
}

private string ParseString(JToken token, string key)
{
    return token[key]?.ToString() ?? string.Empty;
}

private bool ParseBool(JToken token, string key)
{
    var valueToken = token[key];
    return valueToken != null && bool.TryParse(valueToken.ToString(), out bool parsedBool) ? parsedBool : false;
}

private DateTime ParseDateTime(JToken token, string key)
{
    var valueToken = token[key];
    return valueToken != null && DateTime.TryParse(valueToken.ToString(), out DateTime parsedDate) ? parsedDate : DateTime.MinValue;
}

private double ParseDouble(JToken token, string key)
{
    var valueToken = token[key];
    return valueToken != null && double.TryParse(valueToken.ToString(), out double parsedDouble) ? parsedDouble : 0.0;
}

private byte[] ParseByteArray(JToken token, string key)
{
    var valueToken = token[key];
    return valueToken != null ? Convert.FromBase64String(valueToken.ToString()) : Array.Empty<byte>();
}
}
