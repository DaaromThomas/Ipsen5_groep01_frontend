@page "/LeverancierDossierInzien/{candidateId}/{contractId}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Http
@using Models
@inject NavigationManager NavigationManager

@using Services;
@using Ipsen5_groep01_frontend.Services
@using Ipsen5_groep01_frontend.Requests

@inject LoginService LoginService
@inject FileUploadService FileUploadService
@inject ContractService ContractService

@inject IJSRuntime JSRuntime
@inject RequestMakerService RequestMakerService
@inject HttpClient HttpClient
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;


<div class="customer-container-background">
<div class="button-container">
        <button class="navigate-button" @onclick="()=>navigate()">Terug</button>
    </div>
    <div class="page-title">@contractId</div>
    <div class="customer-container">
        <div class="customer-header">
            <div class="header-title">Naam</div>
            <div class="header-title"></div>
            <div class="header-title">Geupload op</div>
            <div class="header-title">Status</div>
            <div class="header-title">Kies Bestand</div>
            <div class="header-title">Uploaden</div>
        </div>

        @if (candidateDocuments != null)
        {
            @foreach (var document in candidateDocuments)
            {
                <div class="customers">
                    <div>@document.UploadTypeId</div>
                    <div></div>
                    <div>@document.UpdatedBy</div>
                    <div>@document.Status</div>

                    <InputFile class="eye_icon" OnChange="@(e => file = e)" @onclick:stopPropagation/>
                    <button class="view_customer" @onclick="() => UploadFile(document.Id.ToString(), file, candidateId, document.ContractId.ToString(), GetUploadTypeName(document.UploadTypeId), document)">
                        <img class="eye_icon" src="/icons/upload.png"/>
                    </button>
                </div>

            }
        }
        else
        {
            <tr>
                <td colspan="2">Geen documenten gevonden.</td>
            </tr>
        }

    </div>
</div>


@code {
    private RequestMakerService _requestMakerService;

    [Parameter]
    public string candidateId { get; set; }

    [Parameter]
    public string contractId { get; set; }
    private List<DocumentOpened> chosenDocuments = new List<DocumentOpened>();
    private List<Dossier> dossiers = new List<Dossier>();
    private InputFileChangeEventArgs file;

    private List<CandidateDocumentModel> candidateDocuments;
    private List<UploadTypeModel> _uploadTypes = [];

    protected override void OnInitialized()
    {
        _requestMakerService = new RequestMakerService(HttpClient);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
        await GetAllUploadTypesAsync();

    }

    private async Task LoadDocuments()
    {
        var _candidateId = Guid.Parse(candidateId);
        var _contractId = Guid.Parse(contractId);
        await ContractService.getContractsByCandidateId(candidateId.ToString());
        var contract = ContractService.Contracts.FirstOrDefault(c => c.Id.ToString() == contractId.ToString());
        if (contract != null)
        {
            candidateDocuments = contract.CandidateDocumentsDto;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoginService.setIsAdmin(false);
            LoginService.setLoggedIn(true);
        }
    }

    private string GetRowColor(string status)
    {
        switch (status)
        {
            case "Wachten op beoordeling":
                return "#C3E6FF"; // Light blue
            case "Afgekeurd":
                return "#FFB8B8"; // Light red
            case "Nog op te leveren":
                return "#DBDBDB"; // Light gray
            case "Goedgekeurd":
                return "#92DD8c"; // Green
            default:
                return "white";
        }
    }

    public void navigate()
    {
        this.NavigationManager.NavigateTo($"/LeverancierDossierScherm/{candidateId}");
        ResetSelectedContract();
    }

    private void ResetSelectedContract()
    {
        contractId = null;
    }

    private async Task UploadFile(string documentId, InputFileChangeEventArgs e, string candidateId, string contractId, string uploadTypeName, CandidateDocumentModel document)
    {
        var file = e.File;
        if (file == null)
        {
            Console.WriteLine("No file selected.");
            return;
        }

        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);
            var result = await FileUploadService.UploadFileAsync(memoryStream, file.Name, candidateId, contractId, uploadTypeName);

            document.Status = "Wachten op beoordeling";

            CandidateDocumentModelRequest request = new CandidateDocumentModelRequest();
            request.CandidateDocumentDto = document;

            await _requestMakerService.MakePatchRequest("CandidateDocument/updateDocumentStatus", request);
        }

        
    }

    private string GetUploadTypeName(Guid uploadTypeId)
    {
        var uploadType = _uploadTypes.FirstOrDefault(ut => ut.Id == uploadTypeId);
        return uploadType?.Type ?? "Unknown";
    }


    public class DocumentOpened
    {
        public Document Document { get; set; }
        public bool Opened { get; set; }

        public DocumentOpened(Document document)
        {
            Document = document;
            Opened = false;
        }

    } 

    public async Task<List<UploadTypeModel>> GetAllUploadTypesAsync()
    {
        var response = await _requestMakerService.MakeGetRequest("uploadtype/alluploadtypes");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var contractArray = outerObject["result"]["uploadTypeDto"];


        foreach (var jToken in contractArray)
        {
            var uploadType = new UploadTypeModel();
            uploadType.Id = Guid.Parse((string)jToken["id"]);
            uploadType.Type = (string)jToken["type"];
            uploadType.DocumentType = (string)jToken["documentType"];
            uploadType.Required = (bool)jToken["required"];

            _uploadTypes.Add(uploadType);
        }

        return _uploadTypes;
    }
}
