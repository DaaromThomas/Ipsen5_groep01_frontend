@page "/LeverancierDossierInzien/{candidateId}/{contractId}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Http
@using Models
@inject NavigationManager NavigationManager

@using Services;
@using Ipsen5_groep01_frontend.Services
@inject LoginService LoginService
@inject FileUploadService FileUploadService
@inject ContractService ContractService

@inject IJSRuntime JSRuntime



<div class="customer-container-background">

    <div class="button-container">
        <button type="submit" class="previous-button" @onclick="navigate">
            Vorige
        </button>
    </div>
    <div class="page-title">@contractId</div>
    <div class="customer-container">
        <div class="customer-header">
            <div class="header-title">Naam</div>
            <div class="header-title"></div>
            <div class="header-title">Geupload op</div>
            <div class="header-title">Status</div>
            <div class="header-title">Kies Bestand</div>
            <div class="header-title">Uploaden</div>
        </div>




        @if (candidateDocuments != null)
        {
            @foreach (var document in candidateDocuments)
            {
                <div class="customers">
                    <div>@document.UploadTypeId</div>
                    <div></div>
                    <div>@document.UpdatedBy</div>
                    <div>@document.Status</div>

                    <InputFile class="eye_icon" OnChange="@(e => file = e)" @onclick:stopPropagation>
                        <img class="eye_icon" src="/icons/upload.png" />
                    </InputFile>
                    <button class="view_customer" @onclick="() => UploadFile(document.Id.ToString(), file, candidateId, document.ContractId.ToString())">
                        <img class="eye_icon" src="/icons/upload.png"/>
                    </button>
                </div>
            }
        }
        else
        {
            <tr>
                <td colspan="2">Geen documenten gevonden.</td>
            </tr>
        }

    </div>
</div>


@code {
    [Parameter]
    public string candidateId { get; set; }

    [Parameter]
    public string contractId { get; set; }
    private List<DocumentOpened> chosenDocuments = new List<DocumentOpened>();
    private List<Dossier> dossiers = new List<Dossier>();
    private InputFileChangeEventArgs file;

    private List<CandidateDocumentModel> candidateDocuments;


    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();

    }

    private async Task LoadDocuments()
    {
        var _candidateId = Guid.Parse(candidateId);
        var _contractId = Guid.Parse(contractId);
        await ContractService.getContractsByCandidateId(candidateId.ToString());
        var contract = ContractService.Contracts.FirstOrDefault(c => c.Id.ToString() == contractId.ToString());
        if (contract != null)
        {
            candidateDocuments = contract.CandidateDocumentsDto;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoginService.setIsAdmin(false);
            LoginService.setLoggedIn(true);
        }
    }

    private string GetRowColor(string status)
    {
        switch (status)
        {
            case "Wachten op beoordeling":
                return "#C3E6FF"; // Light blue
            case "Afgekeurd":
                return "#FFB8B8"; // Light red
            case "Nog op te leveren":
                return "#DBDBDB"; // Light gray
            case "Goedgekeurd":
                return "#92DD8c"; // Green
            default:
                return "white";
        }
    }

    public void navigate()
    {
        this.NavigationManager.NavigateTo($"/LeverancierDossierScherm/{candidateId}");
        ResetSelectedContract();
    }

    private void ResetSelectedContract()
    {
        contractId = null;
    }

    private async Task UploadFile(string documentId, InputFileChangeEventArgs e, string candidateId, string contractId)
    {
        var file = e.File;
        if (file == null)
        {
            Console.WriteLine("No file selected.");
            return;
        }

        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);
            var result = await FileUploadService.UploadFileAsync(memoryStream, file.Name, candidateId, contractId);
            Console.WriteLine($"Upload result for document {documentId} to contract {contractId}: {result}");
        }
    }


    public class DocumentOpened
    {
        public Document Document { get; set; }
        public bool Opened { get; set; }

        public DocumentOpened(Document document)
        {
            Document = document;
            Opened = false;
        }
    }
}
