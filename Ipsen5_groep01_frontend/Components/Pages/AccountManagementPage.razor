@page "/account"
@rendermode InteractiveServer


@using Services
@using Models
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject NotificatieService NotificationService


<div class="user-container-background">
    <div class="page-title">Accounts</div>
    <div class="filter-container">
        <div class="filters">
            <div class="search-container">
                <div class="form-group search-field" >
                    <input value="@searchString" @onkeydown="HandleKeyDown" @oninput="UpdateSearchString" id="name" class="form-control" placeholder="Zoeken">
                </div>
            </div>

            <div class="dropdown-container">
            </div>

        </div>
        
        <div class="new-user-button-container">
            <button class="new-user-button" @onclick="() => NavigateToNewAccount()">Nieuw account</button>
        </div>
        

    </div>
    <div class="user-container">
        <div class="user-header">
            <div class="header-title">Voornaam</div>
            <div class="header-title">Achternaam</div>
            <div class="header-title">Email</div>
            <div class="header-title"></div>
            <div class="header-title"></div>
            <div class="header-title">Acties</div>
        </div>

        @foreach (var user in users.Skip((currentPage - 1) * pageSize).Take(pageSize))
        {
                <div class="users">
                    <div>@user.FirstName</div>
                    <div>@user.LastName</div>
                    <div>@user.Email</div>
                    <div></div>
                    <div></div>
                    @if(user.IsActive)  
                    {
                        <button class="delete_user" @onclick="() => DisableUser(user.Id.ToString())">
                            <img class="delete_icon" src="/icons/trash-2.png" alt="Verwijder" />
                        </button>
                    }
                    @if(!user.IsActive)
                    {
                        <button class="delete_user" @onclick="() => EnableUser(user.Id.ToString())">
                            <img class="delete_icon" src="/icons/trash-1.png" alt="Maak account actief" />
                        </button>
                    }

                </div>
        }

        <div class="pagination-container">
            <div class="pagination-buttons">

                <button class="previous-page-button" @onclick="() => ChangePage(-1)">
                    @if (currentPage > 1)
                    {
                        <img class="rotate-18" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

                <div class="pagination-info">
                    @currentPage van @totalPages
                </div>

                <button class="next-page-button" @onclick="() => ChangePage(1)">
                    @if (users.Count() > currentPage * pageSize)
                    {
                        <img class="rotate-180" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

            </div>
        </div>

    </div>
</div>



@code {
    private List<User> users = new List<User>();

    private int pageSize = 10;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)users.Count() / pageSize);
    private string searchString;


    private RequestMakerService _requestMakerService;
    private UserService _userService;


    public AccountManagementPage()
    {
        _userService = new UserService(new RequestMakerService(new HttpClient()));

    }
    
    protected override void OnInitialized()
    {


        if (!AuthService.IsLoggedIn || AuthService.Role != "Admin")
        {
            NavigationManager.NavigateTo("/signin");
        }


        _requestMakerService = new RequestMakerService(HttpClient);


        base.OnInitialized();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers(".");
    }
    
    private void UpdateSearchString(ChangeEventArgs e)
    {
        searchString = e.Value.ToString();
        CheckSearchStringIsEmpty(searchString);
    }
    
    private void CheckSearchStringIsEmpty(string searchString)
    {
        if (searchString == "")
        {
            LoadUsers(".");
        }
    }
    
    void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            LoadUsers(searchString);
        }
    }

    private async Task LoadUsers(string searchString)
    {
        users = await _userService.GetAllUsers(searchString);
        StateHasChanged();
    }


    private Dictionary<Guid, Customer> customers = new Dictionary<Guid, Customer>();
    private Dictionary<Guid, Candidate> candidates = new Dictionary<Guid, Candidate>();







    public async Task<List<User>> GetAllUsers(string searchString)
    {
        var response = await _requestMakerService.MakeGetRequest($"user/getallusers?search={searchString}");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        Console.WriteLine(outerObject);
        var userArray = outerObject["result"]["userDto"];

        if(userArray == null){
            NotificationService.Notify("Er zijn geen accounts geladen.", NotificationType.Error);
        }
        
        // users.Clear();
        foreach (var jToken in userArray)
        {

            var user = new User();
            user.Id = Guid.Parse((string)jToken["id"]);
            user.FirstName = (string)jToken["firstName"];
            user.LastName = (string)jToken["lastName"];
            user.Email = (string)jToken["email"];
            user.IsActive = (bool)jToken["isActive"];
            
            users.Add(user);
        }
        return users;
    }
    
    private async Task DisableUser(string id)
    {
        var response = await _requestMakerService.MakePutRequest($"user/disable/{id}", "");
        if (response.IsSuccessStatusCode)
        {
            await LoadUsers(".");
        }
    }

    private async Task EnableUser(string id)
    {
        var response = await _requestMakerService.MakePutRequest($"user/enable/{id}", "");
        if (response.IsSuccessStatusCode)
        {
            await LoadUsers(".");
        }
    }



    private void NavigateToUserDetails(string userId)
    {
        NavigationManager.NavigateTo($"/DocumentBeoordelen/{userId}");
    }
    

    void ChangePage(int increment)
    {
        currentPage += increment;
    }


    private void NavigateToNewAccount()
    {
        NavigationManager.NavigateTo($"/AccountCreationPage");
    }

}