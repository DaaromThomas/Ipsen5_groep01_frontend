@page "/contract/{ContractId:guid}"

@rendermode InteractiveServer


@using Models
@using Services
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthService AuthService
@inject RequestMakerService RequestMakerService
@inject Contract contractDetails

<div class="container">
    <div class="button-container">
        <button class="navigate-button" @onclick="()=>navigate()">Terug</button>
    </div>
    @if (contractDetails == null)
    {
        <p>Laden</p>
    }
    else
    {
        
    }
     
</div>

@code {
    [Parameter]
    public Guid ContractId { get; set; }
    private int page = 1;


    public ViewContractPage()
    {
        RequestMakerService = new RequestMakerService(new HttpClient());
    }

    protected override void OnInitialized()
    {
        if (!AuthService.IsLoggedIn || AuthService.Role != "Admin")
        {
            NavigationManager.NavigateTo("/signin");
        }

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetContractById(ContractId.ToString());
    }




    public async Task<Contract> GetContractById(string contractId)
    {
        var response = await RequestMakerService.MakeGetRequest($"contract/contractbyid/{contractId}");
        var json = await response.Content.ReadAsStringAsync();

        var jToken = JObject.Parse(json)?["result"]?["contractDto"];

        if(jToken == null){
            return new Contract();
        }

        contractDetails = new Contract
        {
            Id = ParseGuid(jToken, "id"),
            CandidateId = ParseGuid(jToken, "candidateId"),
            CustomerId = ParseGuid(jToken, "customerId"),
            Status = ParseString(jToken, "status"),
            StartDate = ParseDateTime(jToken, "startDate"),
            EndDate = ParseDateTime(jToken, "endDate"),
            PurchaseRate = ParseDouble(jToken, "purchaseRate"),
            SellingRate = ParseDouble(jToken, "sellingRate"),
            PaymentTerm = ParseString(jToken, "paymentTerm"),
            FeeParty = ParseString(jToken, "feeParty"),
            JobDescription = ParseString(jToken, "jobDescription"),
            Note = ParseString(jToken, "note"),
            Template = ParseBool(jToken, "template")
        };

        return contractDetails;
    }

    private void navigate()
    {
        NavigationManager.NavigateTo("/Contract");
    }

    private Guid ParseGuid(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && Guid.TryParse(valueToken.ToString(), out Guid parsedId) ? parsedId : Guid.Empty;
    }

    private string ParseString(JToken token, string key)
    {
        return token[key]?.ToString() ?? string.Empty;
    }

    private DateTime ParseDateTime(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && DateTime.TryParse(valueToken.ToString(), out DateTime parsedDate) ? parsedDate : DateTime.MinValue;
    }

    private double ParseDouble(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && double.TryParse(valueToken.ToString(), out double parsedDouble) ? parsedDouble : 0.0;
    }

    private bool ParseBool(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && bool.TryParse(valueToken.ToString(), out bool parsedBool) ? parsedBool : false;
    }

}
