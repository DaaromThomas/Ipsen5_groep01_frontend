@page "/DocumentBeoordelen/{contractId}"
@using Ipsen5_groep01_frontend.Models
@using Ipsen5_groep01_frontend.Services
@using Ipsen5_groep01_frontend.Requests
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject ContractService ContractService
@inject RequestMakerService RequestMakerService
@inject NotificatieService NotificationService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

 
<div class="document-container-background">
    <div class="page-title">Document beoordelen</div>
 
    <div class="document-container">
        <div class="document-header">
            <div class="header-title">Document</div>
            <div class="header-title">Status</div>
            <div class="header-title">Upload-datum</div>
            <div class="header-title">Download</div>
        </div>
 
        @foreach (CandidateDocumentModel document in _documents.Skip((currentPage - 1) * pageSize).Take(pageSize)){
            <div class="documents">
                <div>@GetUploadTypeName(document.UploadTypeId)</div>
                <div class="status-container-color">
                    <select @onchange="(e) => OnStatusChange(e, document)" 
                            style="background-color: @GetBackgroundColor(document.Status);"
                            class="custom-select">
                        @foreach(var option in statusOptions){
                            if(@document.Status == option){
                                <option selected value="@document.Status">@document.Status</option>
                            } else {
                                <option value="@option">@option</option>
                            }
                        }
                    </select>
                </div>
                <div>@document.UpdatedDate.ToString("dd-MM-yyyy")</div>  
                <img class="edit_icon" src="/icons/download.png" alt="Bewerk" @onclick="() => DownloadDocument(GetUploadTypeName(document.UploadTypeId))">
                @if(@document.Status == "Wachten op beoordeling"){
                    <div class="button-holder">
                        <button class="button ok-button" @onclick="() => UpdateDocumentStatus(0, document)">✓</button>
                        <button class="button no-button" @onclick="() => UpdateDocumentStatus(1, document)">X</button>
                    </div>
                }
            </div>
        }
 
        <div class="pagination-container">
            <div class="pagination-buttons">
 
                <button class="previous-page-button" @onclick="() => ChangePage(-1)">
                    @if (currentPage > 1)
                    {
                        <img class="rotate-18" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>
 
                <div class="pagination-info">
                    @currentPage van @totalPages
                </div>
 
                <button class="next-page-button" @onclick="() => ChangePage(1)">
                    @if (_documents.Count() > currentPage * pageSize)
                    {
                        <img class="rotate-180" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>
 
            </div>
        </div>
    </div>
    <div class="contract-note-container">
        <label for="contractNote">Opmerkingen voor het contract:</label>
        <textarea id="contractNote" @bind="_contract.Note" placeholder="Voeg een opmerking toe..."></textarea>
        <button class="button save-note-button" @onclick="() => UpdateContractNote()">Opslaan</button>
    </div>
</div>
<script>
    window.downloadFile = function (url, fileName) {
        var link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', fileName);
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>
 
 
@code{


    [Parameter]
    public required string contractId{ get; set; }
    private List<Contract> _contracts = new List<Contract>();

    private Contract _contract = new Contract();
 
    private int pageSize = 10;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)_documents.Count() / pageSize);

    private string[] statusOptions = [
        "Goedgekeurd",
        "Afgekeurd",
        "Wachten op beoordeling",
        "New"
    ];

    private List<CandidateDocumentModel> _documents = [];
    private List<UploadTypeModel> _uploadTypes = [];

     protected override void OnInitialized()
    {
        RequestMakerService = new RequestMakerService(new HttpClient());
    }

    protected override async Task OnInitializedAsync()
    {
        await getCandidateDocumentByContractId(contractId);
        await GetAllUploadTypesAsync(true);
        await GetAllUploadTypesAsync(false);

    }
 
    private async Task getCandidateDocumentByContractId(string contractId){
        await GetContracts(".");
    }
 
    void ChangePage(int increment)
    {
        currentPage += increment;
    }
 
    private string GetBackgroundColor(string status)
    {
        return status switch
        {
            "New" => "lightgreen",
            "Completed" => "#AA77FF",
            "Wachten op beoordeling" => "#FFFDD0",
            "Goedgekeurd" => "#3CB371",
            "Afgekeurd" => "#FF3131",
            _ => "lightblue"
        };
    }

     private string GetUploadTypeName(Guid uploadTypeId)
    {
        var uploadType = _uploadTypes.FirstOrDefault(ut => ut.Id == uploadTypeId);
        return uploadType?.Type ?? "Unknown";
    }

    private async Task DownloadDocument(string UploadTypeName){
        var response = await RequestMakerService.MakeGetRequest($"BlobStorage/downloadFile/{_contract.CustomerId}/{_contract.Id}/{UploadTypeName}");
         var contentDisposition = response.Content.Headers.ContentDisposition;
        var fileName = contentDisposition?.FileNameStar ?? contentDisposition?.FileName ?? "downloaded_file";
        fileName = Uri.UnescapeDataString(fileName);
        string downloadsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
        var filePath = Path.Combine(downloadsPath, fileName);

        using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None))
        {
            await response.Content.CopyToAsync(fileStream);
        }

        var downloadUrl = $"https://staffingnowdocuments.blob.core.windows.net/myfiles/{_contract.CustomerId}/{_contract.Id}/{UploadTypeName}/{fileName}";
        if(fileName != "downloaded_file"){
            await JSRuntime.InvokeVoidAsync("downloadFile", downloadUrl, fileName);
        }
        else{
            NotificationService.Notify("Dit document is nog niet geüpload", NotificationType.Error);
        }
        

    }

    private void OnStatusChange(ChangeEventArgs e, CandidateDocumentModel document)
    {
        var selectedStatus = e.Value.ToString();
        int selectedStatusBoolean;
        if(selectedStatus == "Goedgekeurd"){
            selectedStatusBoolean = 0;
        } else if(selectedStatus == "Afgekeurd"){
            selectedStatusBoolean = 1;
        } else if(selectedStatus == "Wachten op beoordeling"){
            selectedStatusBoolean = 2;
        } else {
            selectedStatusBoolean = 3;
        }
        UpdateDocumentStatus(selectedStatusBoolean, document);
    }

    private async Task UpdateDocumentStatus(int statusBoolean, CandidateDocumentModel document){
        if(statusBoolean == 0){
            document.Status = "Goedgekeurd";
        } else if(statusBoolean == 1){
            document.Status = "Afgekeurd";
        } else if(statusBoolean == 2){
            document.Status = "Wachten op beoordeling";
        } else if(statusBoolean == 3){
            document.Status = "New";
        }

        CandidateDocumentModelRequest request = new CandidateDocumentModelRequest();
        request.CandidateDocumentDto = document;

        if (RequestMakerService != null)
        {
            await RequestMakerService.MakePatchRequest("CandidateDocument/updateDocumentStatus", request);
        }
    }
    private async Task UpdateContractNote(){
        if(_contract != null){
            ContractRequest request = new();
            {
                request.ContractDto = _contract;

            };

            if(RequestMakerService != null){
                await RequestMakerService.MakePatchRequest("Contract/updatecontract", request);
            }
            NotificationService.Notify("Contract notitie correct aangepast", NotificationType.Success);
            StateHasChanged();
        }
    }

    public async Task<List<Contract>> GetContracts(string searchString)
    {
        try
        {
            var response = await RequestMakerService.MakeGetRequest($"contract/allcontracts?search={searchString}");
            var json = await response.Content.ReadAsStringAsync();

            var outerObject = JObject.Parse(json);
            var contractArray = outerObject?["result"]?["contractDto"] as JArray;

            if (contractArray == null)
            {
                throw new Exception("No contracts found in the response.");
            }

            foreach (var jToken in contractArray)
            {
                var contract = new Contract();
                contract.Id = ParseGuid(jToken, "id");
                contract.CandidateId = ParseGuid(jToken, "candidateId");
                contract.CustomerId = ParseGuid(jToken, "customerId");
                contract.Status = ParseString(jToken, "status");
                contract.StartDate = ParseDateTime(jToken, "startDate");
                contract.EndDate = ParseDateTime(jToken, "endDate");
                contract.PurchaseRate = ParseDouble(jToken, "purchaseRate");
                contract.SellingRate = ParseDouble(jToken, "sellingRate");
                contract.PaymentTerm = ParseString(jToken, "paymentTerm");
                contract.FeeParty = ParseString(jToken, "feeParty");
                contract.JobDescription = ParseString(jToken, "jobDescription");
                contract.Note = ParseString(jToken, "note");
                contract.Template = ParseBool(jToken, "template");
                contract.CandidateDocumentsDto = jToken["candidateDocumentsDto"]?.ToObject<List<CandidateDocumentModel>>() ?? new List<CandidateDocumentModel>();
                _contracts.Add(contract);
            }

            _contract = _contracts.FirstOrDefault(c => c.Id.ToString() == contractId);


            if (_contract != null)
            {
                _documents = _contract.CandidateDocumentsDto ?? new List<CandidateDocumentModel>();
            }
            else
            {

                _documents = new List<CandidateDocumentModel>();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {

        }

        return _contracts;
    }

    public async Task<List<UploadTypeModel>> GetAllUploadTypesAsync(bool required)
    {
        var response = await RequestMakerService.MakeGetRequest($"uploadtype/alluploadtypes?required={required}");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var contractArray = outerObject?["result"]?["uploadTypeDto"];

        if(contractArray == null){
            return [];
        }

        foreach (var jToken in contractArray)
        {
            var uploadType = new UploadTypeModel();
            uploadType.Id = ParseGuid(jToken, "id");
            uploadType.Type = ParseString(jToken, "type");
            uploadType.DocumentType = ParseString(jToken, "documentType");
            uploadType.Required = ParseBool(jToken, "required");

            _uploadTypes.Add(uploadType);
        }

        return _uploadTypes;
        
    }

    private Guid ParseGuid(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && Guid.TryParse(valueToken.ToString(), out Guid parsedId) ? parsedId : Guid.Empty;
    }

    private string ParseString(JToken token, string key)
    {
        return token[key]?.ToString() ?? string.Empty;
    }

    private bool ParseBool(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && bool.TryParse(valueToken.ToString(), out bool parsedBool) ? parsedBool : false;
    }

    private DateTime ParseDateTime(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && DateTime.TryParse(valueToken.ToString(), out DateTime parsedDate) ? parsedDate : DateTime.MinValue;
    }

    private double ParseDouble(JToken token, string key)
    {
        var valueToken = token[key];
        return valueToken != null && double.TryParse(valueToken.ToString(), out double parsedDouble) ? parsedDouble : 0.0;
    }

    private Guid ParseNestedGuid(JToken token, string parentKey, string nestedKey)
    {
        var nestedToken = token[parentKey]?[nestedKey];
        return nestedToken != null && Guid.TryParse(nestedToken.ToString(), out Guid parsedId) ? parsedId : Guid.Empty;
    }

    private string ParseNestedString(JToken token, string parentKey, string nestedKey)
    {
        return token[parentKey]?[nestedKey]?.ToString() ?? string.Empty;
    }
}