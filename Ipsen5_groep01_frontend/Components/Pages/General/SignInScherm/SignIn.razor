@page "/signIn"

@rendermode InteractiveAuto

@using Services
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@using System.Net;
@using System.Runtime.InteropServices;
@using System.Security.Claims;
@using System.Text;
@using static System.Runtime.InteropServices.JavaScript.JSType;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Ipsen5_groep01_frontend.Models
@using Ipsen5_groep01_frontend.Services

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject LoginService LoginService
@inject Page_links Page_links
@inject Secret_consts Secret_consts


<PageTitle>Inloggen</PageTitle>



<div class="page">
    <div class="linear-gradient-Container">
        <div class="login-container">
            <div class="title-login">
                INLOGGEN
            </div>
            <div class="login">
                <EditForm Model="SignInModel" OnValidSubmit="SignInAsync" FormName="signInForm">
                    <DataAnnotationsValidator />
                    <div class="text-fieldcontrainer">
                        <div class="form-group">
                            <label for="email">Email:</label>
                            <InputText id="email" @bind-Value="SignInModel.Email" class="form-control"></InputText>
                            <ValidationMessage For="() => SignInModel.Email"></ValidationMessage>
                        </div>




                        <div class="form-group">
                            <label>Password:</label>
                            <InputText id="password" @bind-Value="SignInModel.Password" type="password" class="form-control"></InputText>
                            <ValidationMessage For="() => SignInModel.Password"></ValidationMessage>
                        </div>
                    </div>
                    <div>
                        <button type="submit" class="login-button">INLOGGEN</button>
                    </div>
                </EditForm>
            </div>
            <div class="back-button-container">
                <button class="back-button" @onclick="() => navigate(Page_links.homeLink)">TERUG</button>
            </div>
        </div>

    </div>
    <div></div>
    <div class="footer">
        <div class="footer-text-container">
            <div class="footer-text">
                © 2024 StaffingNow. All rights reserved
            </div>
        </div>
    </div>
</div>



@code {
    [SupplyParameterFromForm]
    private SignInModel SignInModel { get; set; } = new();
    private string role { get; set; }
    private RequestMakerService _requestMakerService {get; set;}
    private readonly IConfiguration _configuration;
    
    public SignIn(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    protected override void OnInitialized()
    {
        _requestMakerService = new RequestMakerService(HttpClient);
        base.OnInitialized();
    }

    private void navigate(string link)
    {
        NavigationManager.NavigateTo(link);
    }

    protected override void OnAfterRender(bool firstRender){
        if(firstRender){
            setLoginBooleans(loggedIn: false, isAdmin: false);
        }
    }

    private void setLoginBooleans(bool loggedIn, bool isAdmin){
        LoginService.setLoggedIn(loggedIn);
        LoginService.setIsAdmin(isAdmin);
    }

    private async Task SignInAsync()
    {
        if (!string.IsNullOrEmpty(SignInModel.Email) && !string.IsNullOrEmpty(SignInModel.Password))
        {
            HttpResponseMessage response = await _requestMakerService.MakePostRequest("user/signIn", SignInModel);

            if (response.IsSuccessStatusCode)
            {
                if (response.Headers.TryGetValues("Authorization", out var tokens))
                {
                    string token = tokens.FirstOrDefault().Substring(7);
                    ClaimsPrincipal principal = readAndValidateToken(token);

                    string role = principal.FindFirst(ClaimTypes.Role).Value;
                    checkRole(role);
                }
            }
        }
    }


    @* gets an token and checks + validates is. The return can be used to get certain value's hidden in the token *@
    private ClaimsPrincipal readAndValidateToken(string token){
        byte[] key = Encoding.ASCII.GetBytes(Secret_consts.jwt_secret);
        JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler();
        TokenValidationParameters tokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(key),
            ValidateIssuer = false,
            ValidateAudience = false
        };

        SecurityToken validatedToken;
        return handler.ValidateToken(token, tokenValidationParameters, out validatedToken);
    }


    @* Gets an role with datatype string and checks what to do then *@
    private void checkRole(string role){
        if(role.IsNullOrEmpty()){
            return;
        }

        switch(role){
            case "Admin":
                this.navigate(Page_links.interneMedewerkerDossierSchermLink);
                this.setLoginBooleans(loggedIn: true, isAdmin: true);
                break;
            case "Employee":
                this.navigate(Page_links.interneMedewerkerDossierSchermLink);
                this.setLoginBooleans(loggedIn: true, isAdmin: true);
                break;
            case "User":
                this.navigate(Page_links.leverancierDossierSchermLink);
                this.setLoginBooleans(loggedIn: true, isAdmin: false);
                break;
            default:
                break;
        }
        return;
    }
}


