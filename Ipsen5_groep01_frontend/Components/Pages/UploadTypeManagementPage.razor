@page "/documentbeheer"
@attribute [StreamRendering]

@using Services
@using Models
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@inject UploadTypeService UploadTypeService
@inject LoginService LoginService
@inject AuthService AuthService

<div class="upload-type-container-background">
    <div class="page-title">Documenten</div>

    <div class="filter-container">
        <div class="filters">

            <div class="search-container">
                <EditForm Model="UploadTypes" FormName="createCustomerAddressForm">
                    <DataAnnotationsValidator />

                    <div class="form-group search-field">
                        <InputText id="name" @bind-Value="valuetijdelijk" class="form-control" placeholder="Zoeken"></InputText>
                    </div>

                </EditForm>
            </div>

            <div class="dropdown-container">
                <select class="dropdown-field">
                    <option value="">Selecteer filter</option>
                    <option value="option1">Optie 1</option>
                    <option value="option2">Optie 2</option>
                    <option value="option3">Optie 3</option>
                </select>
            </div>

        </div>

        <div class="new-upload-type-button-container">
            <button class="new-upload-type-button" @onclick="() => NavigateToNewuploadtype()">Nieuw Document</button>
        </div>

    </div>
    <div class="upload-type-container">
        <div class="upload-type-header">
            <div class="header-title">Naam</div>
            <div class="header-title">Standaard</div>
            <div class="header-title"></div>
            <div class="header-title"></div>
            <div class="header-title"></div>
            <div class="header-title"></div>
        </div>
        @foreach (var uploadtype in UploadTypes.Skip((currentPage - 1) * pageSize).Take(pageSize))
        {
            <div class="upload-types">
                <div>@uploadtype.Type</div>
                <div>
                    @if (uploadtype.Required)
                    {
                        @:Ja
                    }
                    else
                    {
                        @:Nee
                    }
                </div>
                <div>@uploadtype.DocumentType</div>

                <div class="status-container-color">
                    <div class="status">
                        @uploadtype.DocumentType
                    </div>
                </div>

                <div>@uploadtype.DocumentType</div>
                <button class="view_upload-type" @onclick="() => NavigateTouploadtypeDetails(uploadtype.Id)">
                    <img class="eye_icon" src="/icons/eye-5.png" alt="Bekijk" />
                </button>
                <button class="edit_upload-type">
                    <img class="edit_icon" src="/icons/edit-3.png" alt="Bewerk" />
                </button>
                <button class="delete_upload-type">
                    <img class="delete_icon" src="/icons/trash-2.png" alt="Verwijder" />
                </button>
            </div>
        }

        <div class="pagination-container">
            <div class="pagination-buttons">

                <button class="previous-page-button" @onclick="() => ChangePage(-1)">
                    @if (currentPage > 1)
                    {
                        <img class="rotate-18" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

                <div class="pagination-info">
                    @currentPage van @totalPages
                </div>

                <button class="next-page-button" @onclick="() => ChangePage(1)">
                    @if (UploadTypes.Count() > currentPage * pageSize)
                    {
                        <img class="rotate-180" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

            </div>
        </div>
    </div>






</div>

@code {
    private List<UploadTypeModel> UploadTypes = new List<UploadTypeModel>();

    private int pageSize = 9;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)UploadTypes.Count() / pageSize);
    private string valuetijdelijk = "";

    private UploadService _uploadService;

    public UploadTypeManagementPage()
    {

    }

    protected override void OnInitialized()
    {
        // if (!AuthService.IsLoggedIn || AuthService.Role != "Admin")
        // {
        //     NavigationManager.NavigateTo("/signin");
        // }

        _uploadService = new UploadService(new RequestMakerService(HttpClient));

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllUploadTypesAsync();
    }

    private string GetBackgroundColor(string status)
    {
        return status switch
        {
            "New" => "lightgreen",
            "Completed" => "purple",
            _ => "lightblue"
        };
    }

    private void NavigateTouploadtypeDetails(Guid uploadtypeId)
    {
        NavigationManager.NavigateTo($"/uploadtype/{uploadtypeId}");
    }

    private void NavigateToNewuploadtype()
    {
        NavigationManager.NavigateTo("/NewUploadtype");
    }

    void ChangePage(int increment)
    {
        currentPage += increment;
    }

    private async Task GetAllUploadTypesAsync()
    {
        var allUploadTypes = await _uploadService.GetAllUploadTypesAsync();


        UploadTypes = allUploadTypes
            .GroupBy(ut => ut.Type)
            .Select(g => g.First())
            .ToList();
    }
}
