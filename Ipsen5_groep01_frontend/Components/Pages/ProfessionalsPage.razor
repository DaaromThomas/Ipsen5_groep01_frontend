@page "/Professionals"

@attribute [StreamRendering]

@using Services
@using Models
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@inject UploadTypeService UploadTypeService
@inject LoginService LoginService
@inject AuthService AuthService

<div class="upload-type-container-background">
    <div class="page-title">Leveranciers</div>

    <div class="filter-container">
        <div class="filters">
            <div class="search-container">
                <div class="form-group search-field" >
                    <input value="@searchString" @onkeydown="HandleKeyDown" @oninput="UpdateSearchString" id="name" class="form-control" placeholder="Zoeken">
                </div>
            </div>
        </div>



    </div>
    <div class="upload-type-container">
        <div class="upload-type-header">
            <div class="header-title">Voornaam</div>
            <div class="header-title">Achternaam</div>
            <div class="header-title">Geboortedatum</div>
            <div class="header-title">Gemaakt op</div>
            <div class="header-title"></div>
            <div class="header-title">Acties</div>
        </div>
        @foreach (var candidate in Candidates.Skip((currentPage - 1) * pageSize).Take(pageSize))
        {
            <div class="upload-types">
                <div>@candidate.FirstName</div>
                <div>@candidate.LastName</div>
                <div>@candidate.DateOfBirth</div>
                <div>@candidate.CreatedDate</div>
                <div></div>




                <button class="view_upload-type" @onclick="() => NavigateToCandidateDetails(candidate.Id)">
                    <img class="eye_icon" src="/icons/eye-5.png" alt="Bekijk" />
                </button>

            </div>
        }

        <div class="pagination-container">
            <div class="pagination-buttons">

                <button class="previous-page-button" @onclick="() => ChangePage(-1)">
                    @if (currentPage > 1)
                    {
                        <img class="rotate-18" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

                <div class="pagination-info">
                    @currentPage van @totalPages
                </div>

                <button class="next-page-button" @onclick="() => ChangePage(1)">
                    @if (Candidates.Count() > currentPage * pageSize)
                    {
                        <img class="rotate-180" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

            </div>
        </div>
    </div>






</div>

@code {
    private List<Candidate> Candidates = new List<Candidate>();

    private int pageSize = 9;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)Candidates.Count() / pageSize);
    private string searchString;


    private ProffesionalService _proffesionalService;

    public ProfessionalsPage()
    {
        _proffesionalService = new ProffesionalService(new RequestMakerService(new HttpClient()));
    }

    protected override void OnInitialized()
    {
      
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCandidates(".");
    }
    
    private void UpdateSearchString(ChangeEventArgs e)
    {
        searchString = e.Value.ToString();
        CheckSearchStringIsEmpty(searchString);
    }
    
    private void CheckSearchStringIsEmpty(string searchString)
    {
        if (searchString == "")
        {
            LoadCandidates(".");
        }
    }
    
    void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            LoadCandidates(searchString);
        }
    }
    
    private async Task LoadCandidates(string searchString)
    {
        
        Candidates = await _proffesionalService.GetAllCandidatesAsync(searchString);
        StateHasChanged();
    }


    private void NavigateToCandidateDetails(Guid candidateId)
    {
        NavigationManager.NavigateTo($"/candidate/{candidateId}");
    }



    void ChangePage(int increment)
    {
        currentPage += increment;
    }


}
