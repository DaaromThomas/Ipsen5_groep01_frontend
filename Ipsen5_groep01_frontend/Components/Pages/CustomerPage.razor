@page "/customer"
@rendermode InteractiveServer

@using Services
@using Models
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="customer-container-background">
    <div class="title">
        <div class="">Klanten</div>
    </div>

    <div class="customer-filter-container">
        <div class="filter-container">
        <div class="filters">
            <div class="new-customer-button-container">
                <button class="new-customer-button" @onclick="() => NavigateToNewcustomer()">Zoeken</button>
            </div>
            <div class="new-customer-button-container">
                <button class="new-customer-button" @onclick="() => NavigateToNewcustomer()">Filter Dropdown</button>
            </div>

        </div>

        <div class="new-customer-button-container">
            <button class="new-customer-button" @onclick="() => NavigateToNewcustomer()">NIEUW Klant</button>
        </div>
     </div>
    
    <div class="customer-container">
        <div class="customer-">
            <div class="customer-header">
                <div class="header-title">Klant</div>
                <div class="header-title">PONummer</div>
                <div class="header-title">Periode</div>
                <div class="header-title">Status</div>
                <div class="header-title">Functie</div>
            </div>
            @foreach (var customer in customers.Skip((currentPage - 1) * pageSize).Take(pageSize))
            {
                <div class="customers">
                    <div>@customer.Name</div>
                    <div>@customer.PONumber</div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <button class="view_customer" @onclick="() => NavigateTocustomerDetails(customer.Id)">
                        <img class="eye_icon" src="/icons/eye_icon.svg" alt="Bekijk" />
                    </button>
                    <button class="edit_customer">
                        <img class="edit_icon" src="/icons/edit_icon.svg" alt="Bewerk" />
                    </button>
                    <button class="delete_customer">
                        <img class="delete_icon" src="/icons/delete_icon.svg" alt="Verwijder" />
                    </button>
                </div>
            }
            <div class="pagination-container">

                <div class="pagination-buttons">
                    @if (currentPage > 1)
                    {
                        <button class="previous-page-button" @onclick="() => ChangePage(-1)">
                            <img class="edit_icon" src="/icons/arrow_left_icon.svg" alt="Bewerk" />
                        </button>
                    }


                    <div class="pagination-info">
                        @currentPage van @totalPages
                    </div>

                    @if (customers.Count() > currentPage * pageSize)
                    {
                        <button class="next-page-button" @onclick="() => ChangePage(1)">
                            <img class="edit_icon" src="/icons/arrow_right_icon.svg" alt="Bewerk" />
                        </button>
                    }
                </div>

            </div>
        </div>
        </div>
    </div>
</div>




@code {
    private List<Customer> customers = new List<Customer>();

    private int pageSize = 8;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)customers.Count() / pageSize);

    private RequestMakerService _requestMakerService;

    public CustomerPage()
    {

    }

    protected override void OnInitialized()
    {
        _requestMakerService = new RequestMakerService(HttpClient);

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCustomers();
    }

    private void NavigateTocustomerDetails(Guid customerId)
    {
        NavigationManager.NavigateTo($"/customer/{customerId}");
    }


    private void NavigateToNewcustomer()
    {
        NavigationManager.NavigateTo("/customerconfigpage");
    }


    void ChangePage(int increment)
    {
        currentPage += increment;
    }

    public async Task<List<Customer>> GetCustomers()
    {
        var response = await _requestMakerService.MakeGetRequest("customer/allcustomers");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var customerArray = outerObject["result"]["customerDto"];


        foreach (var jToken in customerArray)
        {
            var customer = new Customer();
            customer.Id = Guid.Parse((string)jToken["id"]);
            customer.Name = (string)jToken["name"];
            customer.PONumber = (string)jToken["poNumber"];

            customer.CustomerAddressDto = new CustomerAddress();
            customer.CustomerAddressDto.StreetName = (string)jToken["streetName"];
            customer.CustomerAddressDto.HouseNumber = (string)jToken["houseNumber"];
            customer.CustomerAddressDto.PostalCode = (string)jToken["postalCode"];
            customer.CustomerAddressDto.Country = (string)jToken["country"];
            customer.CustomerAddressDto.Province = (string)jToken["province"];

            customers.Add(customer);
        }
        return customers;
    }
}