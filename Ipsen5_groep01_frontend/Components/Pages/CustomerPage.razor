@page "/customer"
@rendermode InteractiveServer

@using Services
@using Models
@using Requests;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<div class="customer-container-background">

    <div class="page-title">Klanten</div>
    <div class="filter-container">
        <div class="filters">
            <div class="search-container">
                <EditForm Model="customers" FormName="createCustomerAddressForm">
                    <DataAnnotationsValidator />

                    <div class="form-group search-field">
                        <InputText id="name" @bind-Value="valuetijdelijk" class="form-control" placeholder="Zoeken"></InputText>
                    </div>

                </EditForm>
            </div>

            <div class="dropdown-container">
                <select class="dropdown-field">
                    <option value="">Selecteer filter</option>
                    <option value="option1">Optie 1</option>
                    <option value="option2">Optie 2</option>
                    <option value="option3">Optie 3</option>
                </select>
            </div>

        </div>

        <div class="new-customer-button-container">
            <button class="new-customer-button" @onclick="() => NavigateToNewCustomer()">Nieuw Klant</button>
        </div>
    </div>

    <div class="customer-container">

        <div class="customer-header">
            <div class="header-title">Klant</div>
            <div class="header-title">Contact persoon</div>
            <div class="header-title">KVK</div>
            <div class="header-title">Telefoonnummer</div>
            <div class="header-title">Stad</div>
            <div class="header-title">Acties</div>
        </div>

        @foreach (var customer in customers.Skip((currentPage - 1) * pageSize).Take(pageSize))
        {
            <div class="customers">
                <div>@customer.Name</div>
                <div>@customer.FirstName @customer.LastName</div>
                <div>@customer.KVK</div>
                <div>@customer.PhoneNumber</div>
                <div>@customer.CustomerAddressDto.City</div>

                <button class="view_customer" @onclick="() => NavigateToCustomerDetails(customer.Id)">
                    <img class="eye_icon" src="/icons/eye-5.png" alt="Bekijk" />
                </button>
                <button class="edit_customer" @onclick="() => NavigateToEditCustomerDetails(customer.Id)">
                    <img class="edit_icon" src="/icons/edit-3.png" alt="Bewerk" />
                </button>
                <button class="delete_customer" @onclick="() => UpdateCustomer(customer.Id)">
                    <img class="delete_icon" src="/icons/trash-2.png" alt="Verwijder" />
                </button>
            </div>
        }

        <div class="pagination-container">
            <div class="pagination-buttons">

                <button class="previous-page-button" @onclick="() => ChangePage(-1)">
                    @if (currentPage > 1)
                    {
                        <img class="rotate-18" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

                <div class="pagination-info">
                    @currentPage van @totalPages
                </div>

                <button class="next-page-button" @onclick="() => ChangePage(1)">
                    @if (customers.Count() > currentPage * pageSize)
                    {
                        <img class="rotate-180" src="/icons/left-arrow-icon.svg" alt="Bewerk" />
                    }
                </button>

            </div>
        </div>

    </div>
</div>




@code {
    private List<Customer> customers = new List<Customer>();
    private Customer customerToDisable = new Customer();
    private int pageSize = 10;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)customers.Count() / pageSize);
    private string valuetijdelijk = "";
    private void NotifyStateChanged() => OnChange?.Invoke();
    public event Action OnChange;

    private CustomerService _customerService;

    public CustomerPage()
    {
    	var requestMakerService = new RequestMakerService(new HttpClient());
        _customerService = new CustomerService(requestMakerService);
    }

    protected override void OnInitialized()
    {
        if (!AuthService.IsLoggedIn || AuthService.Role != "Admin")
        {
            NavigationManager.NavigateTo("/signin");
        }


        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        OnChange += StateHasChanged;
        await LoadCustomers();
    }

    private void NavigateToCustomerDetails(Guid customerId)
    {
        NavigationManager.NavigateTo($"/customer/{customerId}");
    }

    private void NavigateToEditCustomerDetails(Guid customerId)
    {
        NavigationManager.NavigateTo($"/editcustomerconfig/{customerId}");
    }

    private void NavigateToNewCustomer()
    {
        NavigationManager.NavigateTo("/customerconfigpage");
    }

    private void ChangePage(int increment)
    {
        currentPage += increment;
    }

    private async Task LoadCustomers()
    {
        customers = await _customerService.GetCustomers();
    }

    private async Task LoadCustomerById(Guid customerId)
    {
        customerToDisable = await _customerService.GetCustomerById(customerId);
    }

    public async Task UpdateCustomer(Guid customerId)
    {
        await LoadCustomerById(customerId);
        customerToDisable.Disabled = true;
        await _customerService.UpdateCustomer(customerToDisable);
        customers.Remove(customerToDisable);
        await LoadCustomers();
        NotifyStateChanged();
    }

    public void Dispose()
    {
        OnChange -= StateHasChanged;
    }
}
