@page "/signIn"

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject LoginService LoginService
@inject AuthService AuthService
@inject ILocalStorageService _localstorage;
@inject RequestMakerService RequestMakerService
@inject NotificatieService NotificationService
@inject IConfiguration Configuration;

@using Services
@using System.Text.Json;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@using System.Net;
@using System.Runtime.InteropServices;
@using System.Security.Claims;
@using System.Text;
@using static System.Runtime.InteropServices.JavaScript.JSType;
@using System.ComponentModel.DataAnnotations;
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Forms;
@using Ipsen5_groep01_frontend.Models;

@rendermode InteractiveAuto

<PageTitle>Inloggen</PageTitle>

<div class="page">
    <div class="linear-gradient-Container">
        <div class="login-container">
            <div class="title-login">
                <div class="inlog-text">Inlog</div>
                <div class="gen-text">gen</div>
            </div>
            <div class="login">
                <EditForm Model="SignInModel" OnValidSubmit="SignInAsync" FormName="signInForm">
                    <DataAnnotationsValidator />
                    <div class="text-fieldcontrainer">
                        <div class="form-group">
                            <label for="email">Email:</label>
                            <InputText id="email" @bind-Value="SignInModel.Email" class="form-control"></InputText>
                            <ValidationMessage For="() => SignInModel.Email"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Password:</label>
                            <div class="password-input">
                                <InputText id="input-password" @bind-Value="SignInModel.Password" type="@GetPasswordInputType()" class="form-control"></InputText>
                                <button type="button" class="password-toggle-btn" @onclick="TogglePasswordVisibility">
                                    @if (showPassword)
                                    {
                                        <i class="fas fa-eye-slash"></i> <!-- Icon when password is visible -->
                                    }
                                    else
                                    {
                                        <i class="fas fa-eye"></i> <!-- Icon when password is hidden -->
                                    }
                                </button>
                            </div>
                            <ValidationMessage For="() => SignInModel.Password"></ValidationMessage>
                        </div>
                    </div>
                    <div>
                        <button  id="login-submit" type="submit" class="login-button">INLOGGEN</button>
                    </div>
                </EditForm>
            </div>
            <div class="back-button-container">
                <button class="back-button" @onclick="NavigateToHome">TERUG</button>
            </div>
        </div>
    </div>
    <div></div>
    <div class="footer">
        <div class="footer-text-container">
            <div class="footer-text">
                © 2024 StaffingNow. All rights reserved
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private SignInModel SignInModel { get; set; } = new();
    
    private string? role { get; set; }

    private bool showPassword = false;

    private void TogglePasswordVisibility()
    {
    showPassword = !showPassword;
    }

    private string GetPasswordInputType()
    {
    return showPassword ? "text" : "password";
    }

    public SignInPage(){
        
    }

    public SignInPage(IConfiguration configuration)
    {
        Configuration = configuration;
    }

    public void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected override void OnInitialized()
    {
        RequestMakerService = new RequestMakerService(new HttpClient());
        base.OnInitialized();
    }

   

    private async Task SignInAsync()
    {
        if (!string.IsNullOrEmpty(SignInModel.Email) && !string.IsNullOrEmpty(SignInModel.Password))
        {

            var response = await RequestMakerService.MakePostRequest("user/signIn", SignInModel, "");
            if (!response.IsSuccessStatusCode){
            NotificationService.Notify("Je inloggegevens zijn incorrect!", NotificationType.Error);
            }
            
            if (response.IsSuccessStatusCode)
            {
                
                if (response.Headers.TryGetValues("Authorization", out var tokens))
                {
                    var Token = tokens.FirstOrDefault().Substring(7);
                    
                    _localstorage.SetItemAsync("JWT", Token);

                    var handler = new JwtSecurityTokenHandler();
                    var secret = "ThisIsMySecre6546rgfg5464fddzffg546fgtKey123456778";
                    var key = Encoding.ASCII.GetBytes(secret);

                    var tokenValidationParameters = new TokenValidationParameters
                        {
                            ValidateIssuerSigningKey = true,
                            IssuerSigningKey = new SymmetricSecurityKey(key),
                            ValidateIssuer = false,
                            ValidateAudience = false
                        };

                    SecurityToken validatedToken;
                    ClaimsPrincipal principal;

                    principal = handler.ValidateToken(Token, tokenValidationParameters, out validatedToken);

                    var roleClaim = principal.FindFirst(ClaimTypes.Role);

                    if (roleClaim != null)
                    {
                        var role = roleClaim.Value;
                        if (role == "Admin" || role == "Employee")
                        {
                            NavigationManager.NavigateTo("/contract");
                        }
                        else if (role == "User")
                        {
                            var jsonResponse = await response.Content.ReadAsStreamAsync();
                            var loginApiResponse = JsonSerializer.Deserialize<LoginApiResponse>(jsonResponse, new JsonSerializerOptions{PropertyNameCaseInsensitive = true});
                            var candidateId = loginApiResponse?.Result?.CandidateId;
                            if(!string.IsNullOrEmpty(candidateId.ToString()))
                            {
                            NavigationManager.NavigateTo($"/LeverancierDossierScherm/{candidateId}");
                            }
                            else{
                                Console.WriteLine("Fout opgetreden bij candidateId");
                            }
                        }
                        AuthService.LogIn(role);
                    }
                }
            }
        }
    }

}
