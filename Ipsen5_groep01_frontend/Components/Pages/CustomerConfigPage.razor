@page "/CustomerConfigPage"

@using Services
@using Models
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Requests;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager


<div class="customer-container-background">
    @if (currentPage == 1)
    {
        <EditForm Model="Customer" OnValidSubmit="NextPage" FormName="createCustomerForm">
            <DataAnnotationsValidator />

            <div class="text-fieldcontrainer">
                <div class="wizard-container">
                    <div class="items-wizard">

                        <div class="basic-info-container">
                            <img class="number-wizard-image" src="/icons/1.1.png" />
                            <div class="basic-info">Basis gegevens</div>
                        </div>

                        <div class="address-wizard">
                            <img class="number-wizard-image" src="/icons/2.1.png" />
                            <div class="address-wizard">Adres gegevens</div>
                             
                        </div>

                        <div class="required-documents-wizard-container">
                            <img class="number-wizard-image" src="/icons/3.1.png" />
                            <div class="required-documents-wizard">Verplichte documenten</div>
                        </div>

                        <div class="last-check-wizard">
                            <img class="number-wizard-image" src="/icons/3.1.png" />
                            <div class="last-check">Controleren</div>
                        </div>

                        <div class="question-mark">
                            <img class="question-mark-image" src="/icons/question-mark.png" />
                        </div>

                    </div>
                </div>

                <div class="field-container">

                    <div class="title-container">
                        <div class="page-name-container">Klant Configuratie</div>
                        <div class="customer-name-container">Stap 1: Basis gegevens</div>
                        <div class="instructions-container">Vul alstublieft de naam van de klant en het PO-nummer in.</div>
                    </div>

                    <div class="name-number-contrainer">


                        <div class="form-group text-field">
                            <label for="name">Naam:</label>
                            <InputText id="name" @bind-Value="Customer.Name" class="form-control"></InputText>
                        </div>

                        <div class="form-group text-field">
                            <label for="poNumber">PO Nummer:</label>
                            <InputText id="poNumber" @bind-Value="Customer.PONumber" class="form-control"></InputText>
                        </div>

                    </div>
                    <div class="next-button-container">
                        <button type="submit" class="next-button">
                            Volgende
                            <img class="next-button-image" src="/icons/right-arrow-icon.svg" />
                        </button>
                    </div>
                </div>
            </div>


        </EditForm>
    }
    else if (currentPage == 2)
    {
        <EditForm Model="Customer" OnValidSubmit="NextPage" FormName="createCustomerAddressForm">
            <DataAnnotationsValidator />

            <div class="text-fieldcontrainer">
                <div class="wizard-container">
                    <div class="items-wizard">

                        <div class="basic-info-container">
                            <img class="number-wizard-image" src="/icons/1.1.png" />
                            <div class="basic-info-faded">Basis gegevens</div>
                        </div>

                        <div class="address-wizard">
                            <img class="number-wizard-image" src="/icons/2.1.png" />
                            <div class="basic-info">Adres gegevens</div>

                        </div>

                        <div class="required-documents-wizard-container">
                            <img class="number-wizard-image" src="/icons/3.1.png" />
                            <div class="required-documents-wizard">Verplichte documenten</div>
                        </div>

                        <div class="last-check-wizard">
                            <img class="number-wizard-image" src="/icons/3.1.png" />
                            <div class="last-check">Controleren</div>

                        </div>
                        <div class="question-mark">
                            <img class="question-mark-image" src="/icons/question-mark.png" />
                        </div>

                    </div>
                </div>

                <div class="field-container">

                    <div class="title-container">
                        <div class="page-name-container">Klant Configuratie</div>
                        <div class="customer-name-container">Stap 2: Adres gegevens</div>
                        <div class="instructions-container">Vul alstublieft het adress van de klant in.</div>
                    </div>

                    <div class="name-number-contrainer">

                        <div class="form-group">
                            <label for="streetName">Straatnaam:</label>
                            <InputText id="streetName" @bind-Value="Customer.CustomerAddressDto.StreetName" class="form-control"></InputText>
                        </div>

                        <div class="form-group">
                            <label for="postalCode">Postcode:</label>
                            <InputText id="postalCode" @bind-Value="Customer.CustomerAddressDto.PostalCode" class="form-control"></InputText>
                        </div>

                        <div class="form-group">
                            <label for="houseNumber">Huisnummer:</label>
                            <InputText id="houseNumber" @bind-Value="Customer.CustomerAddressDto.HouseNumber" class="form-control"></InputText>
                        </div>

                        <div class="form-group">
                            <label for="province">Provincie:</label>
                            <InputText id="province" @bind-Value="Customer.CustomerAddressDto.Province" class="form-control"></InputText>
                        </div>

                        <div class="form-group">
                            <label for="country">Land:</label>
                            <InputText id="country" @bind-Value="Customer.CustomerAddressDto.Country" class="form-control"></InputText>
                        </div>

                    </div>
                    <div class="next-button-container">
                        <button type="button" class="next-button" @onclick="PreviousPage">Vorige</button>
                        <button type="submit" class="next-button">
                            Volgende
                            <img class="next-button-image" src="/icons/right-arrow-icon.svg" />
                        </button>
                    </div>
                </div>
            </div>

            
        </EditForm>
    }
    else if (currentPage == 3)
    {
        <EditForm Model="Customer" OnValidSubmit="SubmitForms" FormName="createTemplateCustomerForm">
            <DataAnnotationsValidator />

            <div class="text-fieldcontrainer">
                <div class="wizard-container">
                    <div class="items-wizard">

                        <div class="basic-info-container">
                            <img class="number-wizard-image" src="/icons/1.1.png" />
                            <div class="basic-info-faded">Basis gegevens</div>
                        </div>

                        <div class="address-wizard">
                            <img class="number-wizard-image" src="/icons/2.1.png" />
                            <div class="basic-info-faded">Adres gegevens</div>

                        </div>

                        <div class="required-documents-wizard-container">
                            <img class="number-wizard-image" src="/icons/3.1.png" />
                            <div class="basic-info">Verplichte documenten</div>
                        </div>

                        <div class="last-check-wizard">
                            <img class="number-wizard-image" src="/icons/3.1.png" />
                            <div class="last-check">Controleren</div>

                        </div>
                        <div class="question-mark">
                            <img class="question-mark-image" src="/icons/question-mark.png" />
                        </div>

                    </div>
                </div>

                <div class="field-container">

                    <div class="title-container">
                        <div class="page-name-container">Klant Configuratie</div>
                        <div class="customer-name-container">Stap 3: Verplichte documenten</div>
                        <div class="instructions-container">Selecteer alstublieft de verplichte documenten van de klant in.</div>
                    </div>

                    <div class="name-number-contrainer">

                        <div class="form-group">
                            <label for="type">Selecteer:</label>
                            <select id="type" @onchange="UpdateSelectedUploadTypes" multiple class="form-control dropdownlist">
                                @foreach (var uploadType in UploadTypes)
                                {
                                    <option value="@uploadType.Id">@uploadType.Type</option>
                                }
                            </select>
                        </div>

                        

                    </div>
                    <div class="next-button-container-dropdown">
                        <button type="button" class="next-button" @onclick="PreviousPage">Vorige</button>
                        <button type="submit" class="next-button">
                            Volgende
                            <img class="next-button-image" src="/icons/right-arrow-icon.svg" />
                        </button>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>




@code {
    private Customer Customer { get; set; } = new();
    private Contract ContractModel { get; set; } = new();

    private List<Contract> contracts = new List<Contract>();
    private List<UploadTypeModel> UploadTypes = new List<UploadTypeModel>();
    private List<Guid> selectedUploadTypeIds = new List<Guid>();

    private Guid customerId;
    private string type;
    private int currentPage = 1;

    private RequestMakerService _requestMakerService;

    public CustomerConfigPage()
    {

    }

    protected override void OnInitialized()
    {
        _requestMakerService = new RequestMakerService(HttpClient);

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUploadTypesAsync();
    }

    public async Task<List<UploadTypeModel>> GetUploadTypesAsync()
    {
        var response = await _requestMakerService.MakeGetRequest("uploadtype/alluploadtypes");
        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var contractArray = outerObject["result"]["uploadTypeDto"];


        foreach (var jToken in contractArray)
        {
            var uploadType = new UploadTypeModel();
            uploadType.Id = Guid.Parse((string)jToken["id"]);
            uploadType.Type = (string)jToken["type"];
            uploadType.DocumentType = (string)jToken["documentType"];
            uploadType.Required = (bool)jToken["required"];

            UploadTypes.Add(uploadType);
        }
        return UploadTypes;
    }

    public async Task CreateCustomerAsync()
    {
        CustomerRequest CustomerRequest = new CustomerRequest
            {
                CustomerDto = Customer
            };


        var response = await _requestMakerService.MakePostRequest("customer/customers", CustomerRequest);

        var json = await response.Content.ReadAsStringAsync();

        var outerObject = JObject.Parse(json);
        var resultObject = outerObject["result"];

        customerId = Guid.Parse((string)resultObject["id"]);
    }

    public async Task CreateCustomerTemplateAsync()
    {
        ContractModel.CandidateId = Guid.Parse("10000000-0000-0000-0000-000000000000");
        ContractModel.CustomerId = customerId;
        ContractModel.Status = $"{customerId} Template";
        ContractModel.StartDate = DateTime.Now;
        ContractModel.EndDate = new DateTime();
        ContractModel.PurchaseRate = 0;
        ContractModel.SellingRate = 0;
        ContractModel.PaymentTerm = $"{customerId} Template";
        ContractModel.FeeParty = $"{customerId} Template";
        ContractModel.JobDescription = $"{customerId} Template";
        ContractModel.Note = $"{customerId} Template";
        ContractModel.Template = true;

        foreach(var uploadTypeId in selectedUploadTypeIds)
        {
            CandidateDocumentModel CandidateDocument = new CandidateDocumentModel
                {
                    UploadTypeId = uploadTypeId,
                    DocumentBlob = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F },
                    Status = $"{customerId} Template",
                    CreatedBy = $"{customerId} Template",
                    UpdatedBy = $"{customerId} Template",
                    CreatedDate = DateTime.Parse("2024-05-20T19:37:39.108Z"),
                    UpdatedDate = DateTime.Parse("2024-05-20T19:37:39.108Z")
                };

            ContractModel.CandidateDocumentsDto.Add(CandidateDocument);
        }
       

        ContractRequest contractRequest = new ContractRequest
            {
                ContractDto = ContractModel
            };


        var response = await _requestMakerService.MakePostRequest("contract/contract", contractRequest);
    }

    private void UpdateSelectedUploadTypes(ChangeEventArgs e)
    {
        var selectedValues = e.Value as IEnumerable<string>;
        if (selectedValues != null)
        {
            selectedUploadTypeIds = selectedValues.Select(Guid.Parse).ToList();
        }
    }

    private async Task SubmitForms()
    {
        await CreateCustomerAsync();
        await CreateCustomerTemplateAsync();
        NavigationManager.NavigateTo("/customer");
    }

    private void NextPage()
    {
        if (currentPage < 3)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
}


