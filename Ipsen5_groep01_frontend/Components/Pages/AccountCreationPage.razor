@page "/AccountCreationPage"

@using Microsoft.AspNetCore.Components.Authorization
@using Services
@using Models
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Requests;
@using Microsoft.AspNetCore.Authorization;
@using BlazorAnimate;
@using System;
@using System.Text.RegularExpressions;


@using System.Text.Json;
@using Blazored.LocalStorage

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject ILocalStorageService _localstorage;

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');
</style>

<script>
    function scrollToTop() {
        window.scrollTo({ top: 0.09 * document.body.scrollHeight, behavior: 'smooth' });
    }

    function scrollToTopStep2() {
        window.scrollTo({ top: 0.08 * document.body.scrollHeight, behavior: 'smooth' });
    }

</script>
<script src="_content/BlazorAnimate/blazorAnimateInterop.js"></script>


<div class="containe ">
  <div class="page-title"> Account Configuratie </div>
  <div class="wizard-container">
    <div class="wizard-circle-container">
      <div class="wizard-circle">
        <div class="circle" style="background-color: @GetCircleColorClass(1);" id="circle1">
          @if (currentStep >= 2)
          {
            <img src="/icons/checkmark.png" />
          }
          else
          {
            <div class="wizard-step">1</div>
          }
        </div>

        <div class="line" style="background-color: @GetLineColorClass(1);"></div>
      </div>
      <div class="wizard-title">Account gegevens</div>
      <div class="wizard-title-status">@(currentStep >= 2 ? "Completed" : "Bezig")</div>
    </div>

    <div class="wizard-circle-container">
      <div class="wizard-circle">
        <div class="circle" style="background-color: @GetCircleColorClass(2);" id="circle2">
          <div class="wizard-step">2</div>
        </div>
      </div>
      <div class="wizard-title">Controleren & opslaan</div>
      <div class="wizard-title-status">@(currentStep >= 2 ? "Bezig" : "In afwachting")</div>
    </div>
  </div>

  @if (currentStep == 1)
  {
    <div class="input-container ">

      <div class="input-description-container">
        <EditForm Model="@User" FormName="createcustomer">
          <DataAnnotationsValidator />

          <div class="description-title">
            Account gegevens
          </div>

          <div class="description">
            Vul hieronder de basisgegevens in om verder te gaan. Zorg ervoor dat alle velden correct en volledig zijn ingevuld.
          </div>

          <div class="section">
            <div class="section-title">Basis gegevens</div>
            <div class="input-pair-Container">
              <div>
                <div class="input-title">Voornaam</div>
                <div>
                  <input class="input-field-pair" placeholder="Holees" @bind="@User.FirstName" />
                </div>
                <ValidationMessage For="() => User.FirstName"></ValidationMessage>
              </div>
              <div>
                <div class="input-title">Achternaam</div>
                <div>
                  <input class="input-field-pair" placeholder="Vliet" @bind="@User.LastName" />
                </div>
                <ValidationMessage For="() => User.LastName"></ValidationMessage>
              </div>
            </div>
            <div>
              <div class="input-title">Email</div>
              <div>
                <input class="input-field" placeholder="Voorbeeld@email.com" @bind="@User.Email" />
              </div>
              <ValidationMessage For="() => User.Email"></ValidationMessage>
            </div>
            <div class="input-pair-Container">
              <div>
                <div class="input-title">Wachtwoord</div>
                <div>
                  <input class="input-field-pair" @bind="@User.Password" />
                </div>
                <ValidationMessage For="() => User.Password"></ValidationMessage>
              </div>

              <div>
                <div class="input-title">Bevestig wachtwoord</div>
                <div>
                  <input class="input-field-pair" @bind="@User.ConfirmPassword" />
                </div>
                <ValidationMessage For="() => User.ConfirmPassword"></ValidationMessage>
              </div>
            </div>
          </div>
          <div class="button-container">
            <button type="submit" class="previous-button" @onclick="GoToPreviousStep">
              Vorige
            </button>
            <button type="submit" class="next-button" @onclick="GoToNextStep">
              Volgende
            </button>
          </div>
        </EditForm>

      </div>
    </div>

  }
  else
  {
    @* <Animate Animation="Animations.SlideRight" Duration="TimeSpan.FromSeconds(1)"> *@
    <div class="input-container">

      <div class="input-description-container">
        <div class="description-title">
          Controleren & Oplsaan
        </div>

        <div class="description">
          Controleer hieronder de basisgegevens. Zorg ervoor dat alle velden correct en volledig zijn ingevuld.
        </div>

        <div class="section-review">
          <div class="section-title">Basis gegevens</div>
          <div class="input-pair-Container-3">
            <div>
              <div class="input-title">Voornaam</div>
              <div class="input-value">@User.FirstName</div>
            </div>
            <div>
              <div class="input-title">Achternaam</div>
              <div class="input-value">@User.LastName</div>
            </div>
          </div>                    
          <div>
            <div class="input-title">Email</div>
            <div class="input-value">@User.Email</div>
          </div>
        </div>
      </div>

      <div class="button-container">
        <button class="previous-button" @onclick="GoToPreviousStep">
          Vorige
        </button>
        <button class="next-button" @onclick="CreateEmployeeAsync">
          Opslaan
        </button>
      </div>
    </div>
  }
</div>


@code {
  private RequestMakerService _requestMakerService;

  private User User { get; set; } = new();
  private Contract ContractModel { get; set; } = new();


  private List<Guid> selectedItems = new List<Guid>();
  private List<Contract> contracts = new List<Contract>();
  private List<UploadTypeModel> UploadTypes = new List<UploadTypeModel>();
  private List<Guid> selectedUploadTypeIds = new List<Guid>();
  private string jwtToken;

  private Guid customerId;
  private string type;
  private int currentPage = 1;
  private int currentStep = 1;
  private string houseNumberValidationMessage;
  private string postalCodeValidationMessage;


  public AccountCreationPage()
  {

  }


  protected override void OnInitialized()
  {
    if (!AuthService.IsLoggedIn || AuthService.Role != "Admin")
    {
      NavigationManager.NavigateTo("/signin");
    }

    _requestMakerService = new RequestMakerService(HttpClient);

    base.OnInitialized();
  }

  protected override async Task OnInitializedAsync()
  {
    await GetUploadTypesAsync();

  }



  public async Task<List<UploadTypeModel>> GetUploadTypesAsync()
  {
    var response = await _requestMakerService.MakeGetRequest("uploadtype/alluploadtypes");
    var json = await response.Content.ReadAsStringAsync();

    var outerObject = JObject.Parse(json);
    var contractArray = outerObject["result"]["uploadTypeDto"];


    foreach (var jToken in contractArray)
    {
      var uploadType = new UploadTypeModel();
      uploadType.Id = Guid.Parse((string)jToken["id"]);
      uploadType.Type = (string)jToken["type"];
      uploadType.DocumentType = (string)jToken["documentType"];
      uploadType.Required = (bool)jToken["required"];

      if (!UploadTypes.Any(u => u.Type == uploadType.Type))
      {

        UploadTypes.Add(uploadType);

        if (uploadType.Required)
        {
          selectedItems.Add(uploadType.Id);

        }
      }
    }
    return UploadTypes;
  }

  public async Task CreateEmployeeAsync()
  {
    var user = User;
    
    user.FirstName = User.FirstName;
    user.LastName = User.LastName;
    user.Email = User.Email;
    user.Password = User.Password;
    user.ConfirmPassword = User.ConfirmPassword;

    UserRequest userRequest = new UserRequest
    {
      User = user
    };
    
    jwtToken = await _localstorage.GetItemAsStringAsync("JWT");
  
    var response = await _requestMakerService.MakePostRequest("user/employee", userRequest, jwtToken);
  
//    var json = await response.Content.ReadAsStringAsync();
  
//    var outerObject = JObject.Parse(json);
//    var resultObject = outerObject["result"];
  
    // customerId = Guid.Parse((string)resultObject["id"]);
    
  }

  public async Task CreateUserTemplateAsync()
  {
    ContractModel.CandidateId = Guid.Parse("10000000-0000-0000-0000-000000000000");
    ContractModel.CustomerId = customerId;
    ContractModel.Status = $"{customerId} Template";
    ContractModel.StartDate = DateTime.Now;
    ContractModel.EndDate = new DateTime();
    ContractModel.PurchaseRate = 0;
    ContractModel.SellingRate = 0;
    ContractModel.PaymentTerm = $"{customerId} Template";
    ContractModel.FeeParty = $"{customerId} Template";
    ContractModel.JobDescription = $"{customerId} Template";
    ContractModel.Note = $"{customerId} Template";
    ContractModel.Template = true;

    foreach (var uploadTypeId in selectedItems)
    {
      CandidateDocumentModel CandidateDocument = new CandidateDocumentModel
      {
        UploadTypeId = uploadTypeId,
        DocumentBlob = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F },
        Status = $"{customerId} Template",
        CreatedBy = $"{customerId} Template",
        UpdatedBy = $"{customerId} Template",
        CreatedDate = DateTime.Parse("2024-05-20T19:37:39.108Z"),
        UpdatedDate = DateTime.Parse("2024-05-20T19:37:39.108Z")
      };

      ContractModel.CandidateDocumentsDto.Add(CandidateDocument);
    }


    ContractRequest contractRequest = new ContractRequest
    {
      ContractDto = ContractModel
    };


    var response = await _requestMakerService.MakePostRequest("contract/contract", contractRequest, "");

    NavigationManager.NavigateTo("/customer");
  }



  private string GetSelectedClass(Guid id)
  {
    return selectedItems.Contains(id) ? "selected" : string.Empty;
  }

  private void ToggleSelection(Guid id)
  {
    var uploadType = UploadTypes.FirstOrDefault(u => u.Id == id);

    if (uploadType != null)
    {
      if (uploadType.Required)
      {
        uploadType.Required = false;
      }
      if (selectedItems.Contains(id))
      {
        selectedItems.Remove(id);
      }
      else
      {
        selectedItems.Add(id);
      }
    }
  }


  private void UpdateSelectedUploadTypes(ChangeEventArgs e)
  {
    var selectedValues = e.Value as IEnumerable<string>;
    if (selectedValues != null)
    {
      selectedUploadTypeIds = selectedValues.Select(Guid.Parse).ToList();
    }
  }



  private async Task SubmitForms()
  {
    // await CreateUserAsync();
    await CreateUserTemplateAsync();
    NavigationManager.NavigateTo("/customer");
  }

  private string GetCircleColorClass(int step)
  {
    if (currentStep == 1)
    {
      if (step == 1)
      {
        return "#FF6700";
      }
      else
      {
        return "grey";
      }
    }
    else if (currentStep == 2)
    {
      if (step == 1)
      {
        return "#1f262f";
      }
      else if (step == 2)
      {
        return "#FF6700";
      }
      else
      {
        return "grey";
      }
    }
    else if (currentStep == 3)
    {
      if (step == 1 || step == 2)
      {
        return "#1f262f";
      }
      else
      {
        return "#FF6700";
      }
    }
    else
    {
      return "grey";
    }
  }

  private string GetLineColorClass(int step)
  {
    if (currentStep == 1)
    {
      return "grey";
    }
    else if (currentStep == 2)
    {
      if (step == 1)
      {
        return "#FF6700";
      }
      else
      {
        return "grey";
      }
    }
    else if (currentStep == 3)
    {
      if (step == 1)
      {
        return "#1f262f";

      }
      else if (step == 2)
      {
        return "#FF6700";

      }
      else
      {
        return "grey";
      }

    }
    else
    {
      return "grey";
    }
  }

  private async Task GoToNextStep()
  {
    if (User.FirstName != null &&
        User.LastName != null &&
        User.Email != null &&
        User.Password != null &&
        User.ConfirmPassword != null
       )
    {
      if (currentStep < 3)
      {
        currentStep++;
        if (currentStep == 2)
        {
          await JSRuntime.InvokeVoidAsync("scrollToTopStep2");
        }
        await JSRuntime.InvokeVoidAsync("scrollToTop");
        // FadeToRight.Run();
      }
    }
  }

  private async Task GoToPreviousStep()
  {
    if (currentStep == 1)
    {
      NavigationManager.NavigateTo("/AccountManagementPage");
    }
    else
    {
      currentStep--;
    }

    if (currentStep == 2)
    {
      await JSRuntime.InvokeVoidAsync("scrollToTopStep2");
    }

    await JSRuntime.InvokeVoidAsync("scrollToTop");
  }
    
}